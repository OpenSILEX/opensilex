#########
## STAGES
#########

# Default Gitlab stages are : build, test, deploy
# The custom stage `check` is added for merge requests (see job merge-request:check)
stages:
  - check
  - build
  - test
  - deploy
  - release

########################
##GLOBAL VARIABLES
########################
variables:
  ###### COMMON CONFIGS ######
  # GIT CONFIG
  GIT_DEPTH: 5
  GIT_OPTIONS: "--allow-unrelated-histories"
  ## BUILD CONFIGS ##
  # MAVEN CONFIG
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  #Â @see : https://books.sonatype.com/mvnref-book/reference/running-sect-options.html
  # --batch-mode Run in non-interactive (batch) mode
  # --show-version : Display version information WITHOUT stopping build
  # -c : lax checksums
  MAVEN_CLI_OPTS: "--batch-mode --show-version -c"
  MAVEN_CACHE_FOLDER: "$CI_PROJECT_DIR/.m2/repository"
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_SKIP_TESTS: "false"
  # DEFAULT SERVER MAVEN VERSION
  MVN_VERSION: 3.6.3
  # DEFAULT SERVER JAVA VERSION
  JAVA_VERSION: 11
  ## DEPLOY CONFIGS ##
  # REMOTE SERVER CONFIG
  RSYNC_INSTANCES_OPTIONS: "--progress --delete"
  RSYNC_INSTANCES_BIN_PATH: "~/opensilex-instances/bin"
  RSYNC_INSTANCES_DATA_PATH: "~/opensilex-instances/data"
  RSYNC_INSTANCES_LOGS_PATH: "~/opensilex-instances/logs"
  RSYNC_INSTANCES_LOGS_ARCHIVED: "~/opensilex-instances/logs/old"
  ###### OPENSILEX ######
  #APP BUILD CONFIG
  #OPENSILEX_APP_REVISION: "1.0.0.rc1-SNAPSHOT"
  OPENSILEX_BUILD_PATH: "opensilex-release/target"
  #APP DEPLOY CONFIG
  DEV_TOOLS_REPO_CONF_FILES_PATH: "instances-configuration"
  OPENSILEX_STOP_SERVER_OPTS: "server stop --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME"
  OPENSILEX_START_SERVER_OPTS: "server start --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME --DEBUG -d"
  OPENSILEX_RESET_ONTOLOGIES_OPTS: "sparql reset-ontologies --DEBUG"
  OPENSILEX_CONFIG_SERVER_OPTS: "--CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME"

  OPENSILEX_JAVA_EXEC_OPTS: java -jar
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  #CACHE
  YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/cache_yarn"
  NODE_CACHE: "$CI_PROJECT_DIR/.node"
  #EMBDED_MONGO_CACHE: "/root/.embedmongo/"
  # Prevent gitlab clone issues
  GITLAB_HTTPS: "false"

########################
##  CACHE TEMPLATE
########################

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_BUILD_JOB_NAME"'
.cache_dependencies: &cache_dependencies
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - $YARN_CACHE_FOLDER
      - $MAVEN_CACHE_FOLDER

########################
##  BUILD TEMPLATE
########################

.build:instance: &build_template_with_opensilex
  <<: *cache_dependencies
  before_script:
    - if [ -z "$OPENSILEX_BUILD_PATH" ]; then echo "Missing OPENSILEX_BUILD_PATH variable"; exit 1; fi
    - if [ -z "$OPENSILEX_APP_REVISION" ]; then echo "Missing OPENSILEX_APP_REVISION variable"; exit 1; fi
    - |
      if [ ! -z "$COMMIT_SHA_OPENSILEX_DEV" ]; then
        git checkout $COMMIT_SHA_OPENSILEX_DEV
      fi
  stage: build
  image: maven:$MVN_VERSION-jdk-$JAVA_VERSION
  script:
    - mvn clean install $MAVEN_CLI_OPTS -Drevision=$OPENSILEX_APP_REVISION -DskipTests=$MAVEN_SKIP_TESTS
    - ls $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION
    - if [ -d "artifacts" ]; then rm -r artifacts; fi
    - mkdir artifacts
    - mv $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION artifacts/$OPENSILEX_APP_REVISION
  artifacts:
    paths:
      - artifacts
    expire_in: "3 week"

########################
##  DEPLOY SSH CONFIGURATION TEMPLATE
########################
.deploy_opensilex_before_script: &deploy_opensilex_before_script
  before_script:
    # test variables before deployement
    - if [ -z "$REMOTE_SERVER_RSYNC_ACCOUNT" ]; then echo "Missing REMOTE_SERVER_RSYNC_ACCOUNT variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_RSYNC_DIR" ]; then echo "Missing REMOTE_SERVER_RSYNC_DIR variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_IP" ]; then echo "Missing REMOTE_SERVER_IP variable"; exit 1; fi
    - if [ -z "$CONFIGS_FILES_DIR_PATH" ]; then echo "Missing CONFIGS_FILES_DIR_PATH variable"; exit 1; fi
    - if [ -z "$INSTANCE_CONFIGURATION_FILE_NAME" ]; then echo "Missing INSTANCE_CONFIGURATION_FILE_NAME variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_SSH_KEY" ]; then echo "Missing REMOTE_SERVER_SSH_KEY variable"; exit 1; fi
    - if [ -z "$OPENSILEX_JAR_ADMIN_PORT" ]; then echo "Missing OPENSILEX_JAR_ADMIN_PORT variable"; exit 1; fi
    - if [ -z "$OPENSILEX_JAR_PORT" ]; then echo "Missing OPENSILEX_JAR_PORT variable"; exit 1; fi
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - echo "$REMOTE_SERVER_IP"
    - mkdir -p ${HOME}/.ssh
    - chmod 700 ${HOME}/.ssh
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - "which ssh-agent || ( apt-get update && apt-get install openssh-client -y )"
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - mkdir -p ${HOME}/.ssh && touch ${HOME}/.ssh/known_hosts
    - ssh-keyscan -H "$REMOTE_SERVER_IP" >> ${HOME}/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ${HOME}/.ssh/config
    - echo "$REMOTE_SERVER_SSH_KEY" >> ${HOME}/.ssh/id_rsa
    - chmod 600 ${HOME}/.ssh/id_rsa

##################################
##  DEPLOY OPENSILEX TEST TEMPLATE
##################################

.deploy:opensilex:instance: &deploy_opensilex_template
  stage: deploy
  image: instrumentisto/rsync-ssh
  script:
    - apk add curl git
    - rm -R $CI_PROJECT_DIR/opensilex-dev-tools
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/opensilex-dev-tools.git --branch master $CI_PROJECT_DIR/opensilex-dev-tools
    - ls $CI_PROJECT_DIR/opensilex-dev-tools
    # Directory details
    - ls $CI_PROJECT_DIR/artifacts/$OPENSILEX_APP_REVISION
    - echo "Create directory ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_DATA_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_PATH}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_ARCHIVED}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "mkdir -p $RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR; mkdir -p $RSYNC_INSTANCES_LOGS_PATH; mkdir -p $RSYNC_INSTANCES_LOGS_ARCHIVED; mkdir -p $RSYNC_INSTANCES_DATA_PATH/$REMOTE_SERVER_RSYNC_DIR;"
    - echo "Upload files"
    - rsync -arzv -e "ssh -i ${HOME}/.ssh/id_rsa" $RSYNC_INSTANCES_OPTIONS $CI_PROJECT_DIR/artifacts/$OPENSILEX_APP_REVISION/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - ls $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH
    - echo "scp -i ${HOME}/.ssh/id_rsa -o 'StrictHostKeyChecking no' $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH/* ${REMOTE_SERVER_RSYNC_ACCOUNT}@${REMOTE_SERVER_IP}:${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - scp -i ${HOME}/.ssh/id_rsa -o "StrictHostKeyChecking no" $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - echo "Remove dependencies list cache"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "rm -f ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/.opensilex.dependencies"
    - echo "Check files"
    - echo ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "ls ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR};"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "ls ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR};"
    - |
      if [[ "$RESET_ONTOLOGIES" == "true" ]]; then
        echo "Reset ontologies ${OPENSILEX_JAVA_EXEC_OPTS} ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/opensilex.jar ${OPENSILEX_CONFIG_SERVER_OPTS} ${OPENSILEX_RESET_ONTOLOGIES_OPTS}";
        ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_CONFIG_SERVER_OPTS} ${OPENSILEX_RESET_ONTOLOGIES_OPTS}";
      fi
    - echo "Restart server ${OPENSILEX_JAVA_EXEC_OPTS} ${RSYNC_INSTANCES_BIN_PATH}/$REMOTE_SERVER_RSYNC_DIR/opensilex.jar"
    - echo "Stop with options --adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP ${OPENSILEX_STOP_SERVER_OPTS}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_STOP_SERVER_OPTS} --adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP"
    - echo "Start with options --adminPort=$OPENSILEX_JAR_ADMIN_PORT --port=$OPENSILEX_JAR_PORT --host=$REMOTE_SERVER_IP ${OPENSILEX_START_SERVER_OPTS}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_START_SERVER_OPTS} --adminPort=$OPENSILEX_JAR_ADMIN_PORT --port=$OPENSILEX_JAR_PORT --host=$REMOTE_SERVER_IP"
    - AUTOGENERATE_ENVIRONMENT_URL="$REMOTE_SERVER_IP:$OPENSILEX_JAR_PORT"
    - echo "Deploy To $AUTOGENERATE_ENVIRONMENT_URL" # In script, get the environment URL.
    - echo "AUTOGENERATE_ENVIRONMENT_URL=$AUTOGENERATE_ENVIRONMENT_URL" >> deploy.env
  environment:
    name: "$CI_COMMIT_REF_NAME-test"
    url: http://$AUTOGENERATE_ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env

##################
### DEFAULT BUILDS
##################

opensilex-master:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

opensilex-develop:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

opensilex-release:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "release"

##################################
### MERGE REQUESTS CHECK AND BUILD
##################################

# Checks that the merge request is valid (target branch must not be master, except if the
# source is a hotfix branch)
# The merge request is considered from a hotfix branch if at least one of these conditions is valid :
# - The branch name starts with "hotfix/"
# - The merge request has the label "hotfix"
# Merge requests marked with the Draft: keyword are also blocked
# No pipeline is triggered for MR from the release branch, because the last release pipeline can be used instead.
merge-request:check:
  stage: check
  script:
    - if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" &&
      ! $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^hotfix\/.* &&
      ! $CI_MERGE_REQUEST_LABELS =~ ^(.+,)*hotfix(,.+)*$ ]]; then
    -   echo "Merging from $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME to master is forbidden"
    -   echo "Only a hotfix can be merged into master"
    -   echo "To mark this merge request as a hotfix, please add the 'hotfix' label, or rename the branch as hotfix/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
    -   exit 1
    - fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TITLE !~ /^(Draft:|\[Draft\]|\(Draft\)).*/i && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "release"

# Builds the merge request
merge-request:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TITLE !~ /^(Draft:|\[Draft\]|\(Draft\)).*/i && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "release"
  needs:
    - job: "merge-request:check"
  tags:
    - stable


####################
### TEST DEPLOYMENTS
####################

# Trigger pipeline for deployment of the master branch
trigger:opensilex-master:deploy:test:
  stage: deploy
  image: curlimages/curl
  script:
    - curl --request POST --form "variables[DEPLOY]=opensilex-master" --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$CI_COMMIT_SHA" --form "variables[OPENSILEX_APP_REVISION]=$OPENSILEX_APP_REVISION" https://forgemia.inra.fr/api/v4/projects/403/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - job: "opensilex-master:build"

# Trigger pipeline for sixtine module deployment
trigger:sixtine:build:
  stage: deploy
  image: curlimages/curl
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[OPENSILEX_APP_REVISION]=$OPENSILEX_APP_REVISION" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$CI_COMMIT_SHA" https://forgemia.inra.fr/api/v4/projects/1757/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - job: "opensilex-master:build"

# Trigger pipeline for the deployment of the develop branch
# - If there is no release branch, then develop is deployed
# - Otherwise, nothing is deployed
trigger:opensilex-develop:deploy:test:
  stage: deploy
  image: alpine
  script:
    - apk update
    - apk add git
    - apk add curl
    - if ! git ls-remote --exit-code --heads origin release; then
    -   echo 'Deploying develop'
    -   curl --request POST --form "variables[DEPLOY]=opensilex-develop" --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$CI_COMMIT_SHA" --form "variables[OPENSILEX_APP_REVISION]=$OPENSILEX_APP_REVISION" https://forgemia.inra.fr/api/v4/projects/403/trigger/pipeline
    - else
    -   echo 'Branch release exists, cannot deploy develop'
    - fi
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
  needs:
    - job: "opensilex-develop:build"

# Trigger pipeline for the deployment of the release branch
trigger:opensilex-release:deploy:test:
  stage: deploy
  image: alpine
  script:
    - apk update
    - apk add curl
    - echo 'Deploying release'
    - curl --request POST --form "variables[DEPLOY]=opensilex-release" --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$CI_COMMIT_SHA" --form "variables[OPENSILEX_APP_REVISION]=$OPENSILEX_APP_REVISION" https://forgemia.inra.fr/api/v4/projects/403/trigger/pipeline
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
  needs:
    - job: "opensilex-release:build"

#################
### CLOSE RELEASE
#################

opensilex-release:close:
  stage: release
  image: alpine
  script:
    - if [[ -z $RELEASE_TAG ]]; then
    -   echo 'RELEASE_TAG must be set'
    -   exit 1
    - else
    -   echo "Closing release $RELEASE_TAG"
    - fi
    # Install packages git & curl
    - apk update
    - apk add git
    - apk add curl
    # Config & variables
    - RELEASE_COMMIT_MESSAGE="Release $RELEASE_TAG"
    - RELEASE_INTERMEDIATE_BRANCH="release-$RELEASE_TAG"
    - git config user.name "OpenSILEX Team"
    - git config user.email opensilex@gmail.com
    - git remote set-url origin "https://oauth2:$GITLAB_USER_CI_PAT@forgemia.inra.fr/OpenSILEX/opensilex-dev.git"
    # Fetch and unshallows the project
    - git fetch origin --unshallow
    # Remove local tags
    - git tag -l | xargs git tag -d
    - git fetch origin --tags
    # Remove the local branches if necessary
    - if git show-ref --quiet refs/heads/release; then
    -   git branch -D release
    - fi
    - if git show-ref --quiet refs/heads/master; then
    -   git branch -D master
    - fi
    - if git show-ref --quiet refs/heads/$RELEASE_INTERMEDIATE_BRANCH; then
    -   git branch -D $RELEASE_INTERMEDIATE_BRANCH
    - fi
    # Create intermediate branch to avoir conflicts
    - git checkout release
    - git checkout -b $RELEASE_INTERMEDIATE_BRANCH
    - git merge origin/master -s ours --no-edit
    # Merge into master
    - git checkout master
    - git merge $RELEASE_INTERMEDIATE_BRANCH --squash
    - git commit -m "$RELEASE_COMMIT_MESSAGE"
    - git tag -a -m "$RELEASE_COMMIT_MESSAGE" "$RELEASE_TAG"
    # Check that there is no diff between master and release now
    - if ! git diff master release --exit-code; then
    -   echo "Something went wrong with the merge; master and release should be the same but have differences"
    -   exit 1
    - fi
    # Push master and the release tag
    - git push -f origin master
    - git push origin $RELEASE_TAG
    # Trigger the merge request to develop
    - >
      curl -X POST -F "private_token=$JOB_API_TOKEN" -F "source_branch=release"
      -F "target_branch=develop" -F "title=[Release] Merge $RELEASE_TAG into develop"
      -F "remove_source_branch=true" -F "labels[]=finishing release"
      https://forgemia.inra.fr/api/v4/projects/1675/merge_requests
    # Transmit release tag variable to next job (name must be different)
    - echo "PUBLISH_RELEASE_TAG=$RELEASE_TAG" >> opensilex-release:close.env
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
  artifacts:
    reports:
      dotenv:
        - "opensilex-release:close.env"
  needs:
    - job: "opensilex-release:build"
  when: manual

############################
## PUBLISH RELEASE TO GITHUB
############################

opensilex-release:publish:
  stage: release
  image: maven:$MVN_VERSION-jdk-$JAVA_VERSION
  script:
    - if [[ -z $PUBLISH_RELEASE_TAG ]]; then
    -   echo 'PUBLISH_RELEASE_TAG must be set'
    -   exit 1
    - else
    -   echo "Publishing release $PUBLISH_RELEASE_TAG"
    - fi
    # Install packages curl & jq
    - apt-get update
    - apt-get install -y curl
    - apt-get install -y jq
    # Remove local tags & fetch them again
    - git tag -l | xargs git tag -d
    - git fetch origin --tags
    # Checkout the release tag & build with the correct revision
    - git checkout $PUBLISH_RELEASE_TAG
    - mvn clean install $MAVEN_CLI_OPTS -Drevision=$PUBLISH_RELEASE_TAG -DskipTests=true
    # Extract release description from changelog
    # The CHANGELOG.md file should have a section starting with "## [$PUBLISH_RELEASE_TAG]", for example "## [1.0.0-rc+4]"
    # Otherwise, "Missing release notes" will be set as the release description
    - echo "Try to extract the release description from changelog..."
    - RELEASE_DESCRIPTION=$(sed -n  "/^## \[${PUBLISH_RELEASE_TAG}\]/,/^## /p" CHANGELOG.md | head -n -1 | jq -Rsa .)
    - if [[ "$RELEASE_DESCRIPTION" == '""' ]]; then
    -   echo "Missing release description for tag $PUBLISH_RELEASE_TAG in the changelog. Please change it later in the Github repository."
    -   RELEASE_DESCRIPTION="\"# [$PUBLISH_RELEASE_TAG] - $(date --iso-8601)\n\nMissing release notes\n\""
    - fi
    # Headers for the queries
    - AUTHORIZATION="$GITHUB_API_ACCOUNT:$GITHUB_API_TOKEN"
    - 'ACCEPTS_HEADER="Accept: application/vnd.github+json"'
    # JSON payload for the creation query
    # NB : the 'RELEASE_DESCRIPTION' variable already contains the quotes (thanks to jq), that's why they're omitted here
    - 'CREATE_QUERY_PAYLOAD="{\"tag_name\":\"$PUBLISH_RELEASE_TAG\",\"name\":\"$PUBLISH_RELEASE_TAG\",\"body\":$RELEASE_DESCRIPTION}"'
    # Create the release
    - 'echo "\"curl -u \"$AUTHORIZATION\" -X POST -H \"$ACCEPTS_HEADER\" -d \"$CREATE_QUERY_PAYLOAD\" https://api.github.com/repos/OpenSILEX/opensilex/releases"'
    - CREATE_RESPONSE=$(curl -u "$AUTHORIZATION" -X POST -H "$ACCEPTS_HEADER" -d "$CREATE_QUERY_PAYLOAD" https://api.github.com/repos/OpenSILEX/opensilex/releases)
    - echo $CREATE_RESPONSE
    # Asset file
    - FILENAME=opensilex-release-$PUBLISH_RELEASE_TAG.zip
    - FILEPATH=opensilex-release/target/$FILENAME
    # Extract the asset upload URL from the response
    # The URL is formatted like this : https://uploads.github.com/repos/OpenSILEX/opensilex/releases/73752399/assets{?name,label}
    # So the last part must be replaced with a valid query parameter (only ?name is required)
    - UPLOAD_URL=$(echo $CREATE_RESPONSE | jq -r .upload_url | sed -e "s/{.*}/\?name=${FILENAME}/g")
    # Upload the asset file
    - 'echo "curl -u \"$AUTHORIZATION\" -X POST -H \"$ACCEPTS_HEADER\" -H "Content-Type: application/zip" -T \"$FILEPATH\" \"$UPLOAD_URL\""'
    - 'curl -u "$AUTHORIZATION" -X POST -H "$ACCEPTS_HEADER" -H "Content-Type: application/zip" -T "$FILEPATH" "$UPLOAD_URL"'
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
  needs:
    - job: "opensilex-release:close"
      artifacts: true


# Trigger pipeline for data-analysis module deployment
#trigger:dataanalysis:deploy:test:
#  stage: deploy
#  image: curlimages/curl
#  script:
#    - sleep 10
#    - curl --request POST --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$CI_COMMIT_SHA" #https://forgemia.inra.fr/api/v4/projects/2076/trigger/pipeline
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master"
#  needs:
#    - job: "opensilex:build"

# Update nightly builds branch
update:nightly:builds:branch:
  stage: build
  script:
    - apt update && apt install -y git
    - git config --global user.name "anonymous"
    - git config --global user.email "anonymous@opensilex.org"
    - git remote set-url origin "https://oauth2:$GITLAB_USER_CI_PAT@forgemia.inra.fr/OpenSILEX/opensilex-dev.git"
    - if [  -z "`git show-ref refs/heads/nightly-builds`" ]; then  echo 'branch nightly-builds will be created!' &&  git checkout -b nightly-builds; else git checkout nightly-builds ;fi
    - git fetch origin
    - git reset --hard origin/master
    - git push -f origin nightly-builds
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

###############################################
##  BUILD - TESTS WITH DIFFERENT MAVEN VERSIONS
###############################################

##  BUILD TEMPLATE
.test:build: &test_build_on_schedules
  <<: *cache_dependencies
  before_script:
    - if [ -z "$JAVA_VERSION" ]; then echo "Missing JAVA_VERSION variable"; exit 1; fi
    - if [ -z "$MVN_VERSION" ]; then echo "Missing MVN_VERSION variable"; exit 1; fi
    - echo "with_java $JAVA_VERSION and maven $MVN_VERSION with latest version of OpenSILEX/opensilex-dev"
  stage: build
  image: maven:$MVN_VERSION-jdk-$JAVA_VERSION
  script:
    - mvn clean install $MAVEN_CLI_OPTS -Drevision=$OPENSILEX_APP_REVISION
    - ls $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION
    - mv $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION $OPENSILEX_APP_REVISION
  rules:
    - if: $NIGHTLY_BUILD == "true"

##  BUILD VERSIONS # example https://gitlab.com/gitlab-org/gitlab-foss/issues/13755

.with_java9: &java9
  variables:
    JAVA_VERSION: 9

.with_java11: &java11
  variables:
    JAVA_VERSION: 11

.with_java13: &java13
  before_script:
    - yum install -y git
  variables:
    JAVA_VERSION: 13

.with_java14: &java14
  before_script:
    - yum install -y git
  variables:
    JAVA_VERSION: 14

test:build:java9:
  <<: *java9
  <<: *test_build_on_schedules

test:build:java11:
  <<: *java11
  <<: *test_build_on_schedules

test:build:java13:
  <<: *java13
  <<: *test_build_on_schedules

test:build:java14:
  <<: *java14
  <<: *test_build_on_schedules

########################
##  BUILD - GITLAB PAGES DOCS
########################

pages:
  <<: *test_build_on_schedules
  script:
    - ln -s $JAVA_HOME java.home
    - cd $CI_PROJECT_DIR/opensilex-swagger-codegen-maven-plugin
    - mvn install $MAVEN_CLI_OPTS
    - cd $CI_PROJECT_DIR
    - mvn install site $MAVEN_CLI_OPTS -Pwith-test-report -Pwith-security-check -DskipFrontBuild
    - mkdir public
    - mv $CI_PROJECT_DIR/opensilex-doc/src/main/resources/generated/* public
  artifacts:
    paths:
      - public
  rules:
    - if: $NIGHTLY_BUILD == "true"

# ##########################################
# ##  BUILD & DEPLOY FOR MISTEA TEAM
# ##########################################

###################################
##  DEMO-BUILD-DEPLOYMENT
###################################

demo:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "demo"

###################################
##  MAX-TEST-SNAPSHOT-DEPLOYMENT
###################################

maximilian:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "maximilian"

test:maximilian:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/maximilian"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4084
    OPENSILEX_JAR_PORT: 8084
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/maximilian"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "maximilian"
      when: on_success
  needs:
    - maximilian:build

###################################
##  ARNAUD-TEST-BUILD-DEPLOYMENT
###################################

arnaud:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "arnaud"

test:arnaud:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/arnaud"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4086
    OPENSILEX_JAR_PORT: 8086
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/arnaud"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "arnaud"
      when: on_success
  needs:
    - arnaud:build

###################################
##  HAMZA-TEST-BUILD-DEPLOYMENT
###################################

hamza:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "hamza"
  tags:
    - stable

test:hamza:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/hamza"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4083
    OPENSILEX_JAR_PORT: 8083
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/hamza"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "hamza"
      when: on_success
  tags:
    - stable
  needs:
    - hamza:build

###################################
##  VALENTIN-TEST-BUILD-DEPLOYMENT
###################################

valentin:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "valentin"

test:valentin:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/valentin"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4096
    OPENSILEX_JAR_PORT: 8096
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/valentin"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "valentin"
      when: on_success
  needs:
    - valentin:build

###################################
##  NOE-TEST-BUILD-DEPLOYMENT
###################################

noe:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "noe"

test:noe:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/noe"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4091
    OPENSILEX_JAR_PORT: 8091
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/noe"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "noe"
      when: on_success
  needs:
    - noe:build

######################################
##  OPTIMIZATION-TEST-BUILD-DEPLOYMENT
######################################

optimization:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "optimization"

test:optimization:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/optimization"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4081
    OPENSILEX_JAR_PORT: 8081
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_BENCHMARK_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/optimization"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "optimization"
      when: on_success
  needs:
    - optimization:build

  ###################################
  ##  SEBASTIEN-TEST-BUILD-DEPLOYMENT
  ###################################

sebastien:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "sebastien"

test:sebastien:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/sebastien"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4089
    OPENSILEX_JAR_PORT: 8089
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/sebastien"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "sebastien"
      when: on_success
  needs:
    - sebastien:build

###################################
##  BENDY-TEST-BUILD-DEPLOYMENT
###################################

bendy:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "bendy"

test:bendy:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/bendy"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4100
    OPENSILEX_JAR_PORT: 8100
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/bendy"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "bendy"
      when: on_success
  needs:
    - bendy:build

###################################
##  alexiaChiavarino-TEST-BUILD-DEPLOYMENT
###################################

alexiaChiavarino:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "alexiaChiavarino"
  tags:
    - stable

test:alexiaChiavarino:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/alexiaChiavarino"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4087
    OPENSILEX_JAR_PORT: 8087
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/alexiaChiavarino"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "alexiaChiavarino"
      when: on_success
  tags:
    - stable
  needs:
    - alexiaChiavarino:build

###################################
##  RENAUD-TEST-BUILD-DEPLOYMENT
###################################

renaud:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "renaud"

test:renaud:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/renaud"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4088
    OPENSILEX_JAR_PORT: 8088
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/renaud"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "renaud"
      when: on_success
  needs:
    - renaud:build

###################################
## TEMPORARY-TEST-BUILD-DEPLOYMENT
###################################

temporary1:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "temporary1"

test:temporary1:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/temporary1"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4092
    OPENSILEX_JAR_PORT: 8092
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/temporary1"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "temporary1"
      when: on_success
  needs:
    - temporary1:build

###################################
##  EMILIE-TEST-SNAPSHOT-DEPLOYMENT
###################################

emilie:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "emilie"

test:emilie:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/emilie"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4094
    OPENSILEX_JAR_PORT: 8094
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/emilie"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "emilie"
      when: on_success
  needs:
    - emilie:build

# ##########################################
# ##  BUILD & DEPLOY FOR PARTNERS TEAMS
# ##########################################

###################################
##  EPHESIA-TEST-BUILD-DEPLOYMENT
###################################

ephesia:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "ephesia"

test:ephesia:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/ephesia"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4090
    OPENSILEX_JAR_PORT: 8090
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/ephesia"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "ephesia"
      when: on_success
  needs:
    - ephesia:build

###################################
##  GUILHEM-TEST-SNAPSHOT-DEPLOYMENT
###################################

guilhem:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "guilhem"

test:guilhem:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/guilhem"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4098
    OPENSILEX_JAR_PORT: 8098
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/guilhem"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "guilhem"
      when: on_success
  needs:
    - guilhem:build

######################################
##  PHENO3C-PROD-BUILD-DEPLOYMENT
######################################

pheno3c:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "pheno3c"
