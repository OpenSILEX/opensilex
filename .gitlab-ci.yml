#########
## STAGES
#########

# Default Gitlab stages are : build, test, deploy
# The custom stage `check` is added for merge requests (see job merge-request:check)
stages:
  - check
  - build
  - test
  - deploy
  - release

########################
##GLOBAL VARIABLES
########################
variables:
  ###### COMMON CONFIGS ######
  # GIT CONFIG
  GIT_DEPTH: 5
  GIT_OPTIONS: "--allow-unrelated-histories"
  ## BUILD CONFIGS ##
  # MAVEN CONFIG
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  #Â @see : https://books.sonatype.com/mvnref-book/reference/running-sect-options.html
  # --batch-mode Run in non-interactive (batch) mode
  # --show-version : Display version information WITHOUT stopping build
  # -c : lax checksums
  MAVEN_CLI_OPTS: "--batch-mode --show-version -c"
  MAVEN_CACHE_FOLDER: "$CI_PROJECT_DIR/.m2/repository"
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_OPTS_SCHUEDULES: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=ERROR -Dorg.slf4j.simpleLogger.defaultLogLevel=error -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  MAVEN_SKIP_TESTS: "false"
  # DEFAULT SERVER MAVEN VERSION
  MVN_VERSION: 3.9.9
  # DEFAULT SERVER JAVA VERSION
  JAVA_VERSION: 17
  ## DEPLOY CONFIGS ##
  # REMOTE SERVER CONFIG
  RSYNC_INSTANCES_OPTIONS: "--progress --delete"
  RSYNC_INSTANCES_BIN_PATH: "~/opensilex-instances/bin"
  RSYNC_INSTANCES_DATA_PATH: "~/opensilex-instances/data"
  RSYNC_INSTANCES_LOGS_PATH: "~/opensilex-instances/logs"
  RSYNC_INSTANCES_LOGS_ARCHIVED: "~/opensilex-instances/logs/old"
  ###### OPENSILEX ######
  #APP BUILD CONFIG
  #OPENSILEX_APP_REVISION: "1.0.0.rc1-SNAPSHOT"
  OPENSILEX_BUILD_PATH: "opensilex-release/target"
  #APP DEPLOY CONFIG
  DEV_TOOLS_REPO_CONF_FILES_PATH: "instances-configuration"
  OPENSILEX_STOP_SERVER_OPTS: "server stop --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME"
  OPENSILEX_START_SERVER_OPTS: "server start --CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME --DEBUG -d"
  OPENSILEX_RESET_ONTOLOGIES_OPTS: "sparql reset-ontologies --DEBUG"
  OPENSILEX_CONFIG_SERVER_OPTS: "--CONFIG_FILE=$INSTANCE_CONFIGURATION_FILE_NAME"

  OPENSILEX_JAVA_EXEC_OPTS: java -jar
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  #CACHE
  YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/cache_yarn"
  NODE_CACHE: "$CI_PROJECT_DIR/.node"
  #EMBDED_MONGO_CACHE: "/root/.embedmongo/"
  # Prevent gitlab clone issues
  GITLAB_HTTPS: "false"

########################
##  CACHE TEMPLATE
########################

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_BUILD_JOB_NAME"'
.cache_dependencies: &cache_dependencies
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - $YARN_CACHE_FOLDER
      - $MAVEN_CACHE_FOLDER

########################
##  BUILD TEMPLATE
########################

.build:instance: &build_template_with_opensilex
  <<: *cache_dependencies
  before_script:
    - if [ -z "$OPENSILEX_BUILD_PATH" ]; then echo "Missing OPENSILEX_BUILD_PATH variable"; exit 1; fi
    - if [ -z "$OPENSILEX_APP_REVISION" ]; then echo "Missing OPENSILEX_APP_REVISION variable"; exit 1; fi
    - |
      if [ ! -z "$COMMIT_SHA_OPENSILEX_DEV" ]; then
        git checkout $COMMIT_SHA_OPENSILEX_DEV
      fi
    - if [ ! -z $MVN_PROFILE ]; then
    -   MVN_PROFILE="-P $MVN_PROFILE"
    -   echo "$MVN_PROFILE will be used"
    - fi
  stage: build
  image: maven:$MVN_VERSION-eclipse-temurin-$JAVA_VERSION-focal
  script:
    - mvn clean install $MVN_PROFILE $MAVEN_CLI_OPTS -Drevision=$OPENSILEX_APP_REVISION -DskipTests=$MAVEN_SKIP_TESTS
    - ls $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION
    - if [ -d "artifacts" ]; then rm -r artifacts; fi
    - mkdir artifacts
    - mv $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION artifacts/$OPENSILEX_APP_REVISION
  artifacts:
    paths:
      - artifacts
    expire_in: "3 week"

########################
##  DEPLOY SSH CONFIGURATION TEMPLATE
########################
.deploy_opensilex_before_script: &deploy_opensilex_before_script
  before_script:
    # test variables before deployement
    - if [ -z "$REMOTE_SERVER_RSYNC_ACCOUNT" ]; then echo "Missing REMOTE_SERVER_RSYNC_ACCOUNT variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_RSYNC_DIR" ]; then echo "Missing REMOTE_SERVER_RSYNC_DIR variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_IP" ]; then echo "Missing REMOTE_SERVER_IP variable"; exit 1; fi
    - if [ -z "$CONFIGS_FILES_DIR_PATH" ]; then echo "Missing CONFIGS_FILES_DIR_PATH variable"; exit 1; fi
    - if [ -z "$INSTANCE_CONFIGURATION_FILE_NAME" ]; then echo "Missing INSTANCE_CONFIGURATION_FILE_NAME variable"; exit 1; fi
    - if [ -z "$REMOTE_SERVER_SSH_KEY" ]; then echo "Missing REMOTE_SERVER_SSH_KEY variable"; exit 1; fi
    - if [ -z "$OPENSILEX_JAR_ADMIN_PORT" ]; then echo "Missing OPENSILEX_JAR_ADMIN_PORT variable"; exit 1; fi
    - if [ -z "$OPENSILEX_JAR_PORT" ]; then echo "Missing OPENSILEX_JAR_PORT variable"; exit 1; fi
    ##
    ## Create the SSH directory and give it the right permissions
    ##
    - echo "$REMOTE_SERVER_IP"
    - mkdir -p ${HOME}/.ssh
    - chmod 700 ${HOME}/.ssh
    ##
    ## Install ssh-agent if not already installed, it is required by Docker.
    ## (change apt-get to yum if you use an RPM-based image)
    ##
    - "which ssh-agent || ( apt-get update && apt-get install openssh-client -y )"
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    ##
    - mkdir -p ${HOME}/.ssh && touch ${HOME}/.ssh/known_hosts
    - ssh-keyscan -H "$REMOTE_SERVER_IP" >> ${HOME}/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ${HOME}/.ssh/config
    - echo "$REMOTE_SERVER_SSH_KEY" >> ${HOME}/.ssh/id_rsa
    - chmod 600 ${HOME}/.ssh/id_rsa

##################################
##  DEPLOY OPENSILEX TEST TEMPLATE
##################################

.deploy:opensilex:instance: &deploy_opensilex_template
  stage: deploy
  tags:
    - runnermia # for now only the MIA 1-4 runners work correctly for deploying instances. Runners 5-8 fail to connect
                # to our instances through SSH.
  image: instrumentisto/rsync-ssh
  script:
    - apk add curl git
    # - If there is no release branch, then develop is deployed
    # - Otherwise, nothing is deployed
    - |
      if git ls-remote --exit-code --heads origin release && [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
        echo 'Branch release exists, cannot deploy develop';
        exit 0;
      fi
    - rm -R $CI_PROJECT_DIR/opensilex-dev-tools
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/opensilex-dev-tools.git --branch master $CI_PROJECT_DIR/opensilex-dev-tools
    - ls $CI_PROJECT_DIR/opensilex-dev-tools
    # Directory details
    - ls $CI_PROJECT_DIR/artifacts/$OPENSILEX_APP_REVISION
    - echo "Create directory ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_DATA_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_PATH}"
    - echo "Create directory ${RSYNC_INSTANCES_LOGS_ARCHIVED}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "mkdir -p $RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR; mkdir -p $RSYNC_INSTANCES_LOGS_PATH; mkdir -p $RSYNC_INSTANCES_LOGS_ARCHIVED; mkdir -p $RSYNC_INSTANCES_DATA_PATH/$REMOTE_SERVER_RSYNC_DIR;"
    - echo "Upload files"
    - rsync -arzv -e "ssh -i ${HOME}/.ssh/id_rsa" $RSYNC_INSTANCES_OPTIONS $CI_PROJECT_DIR/artifacts/$OPENSILEX_APP_REVISION/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - ls $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH
    - echo "scp -i ${HOME}/.ssh/id_rsa -o 'StrictHostKeyChecking no' $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH/* ${REMOTE_SERVER_RSYNC_ACCOUNT}@${REMOTE_SERVER_IP}:${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}"
    - scp -i ${HOME}/.ssh/id_rsa -o "StrictHostKeyChecking no" $CI_PROJECT_DIR/opensilex-dev-tools/$CONFIGS_FILES_DIR_PATH/* $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP:$RSYNC_INSTANCES_BIN_PATH/$REMOTE_SERVER_RSYNC_DIR
    - echo "Remove dependencies list cache"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "rm -f ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/.opensilex.dependencies"
    - echo "Check files"
    - echo ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "ls ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR};"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "ls ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR};"
    - |
      if [[ "$RESET_ONTOLOGIES" == "true" ]]; then
        echo "Reset ontologies ${OPENSILEX_JAVA_EXEC_OPTS} ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}/opensilex.jar ${OPENSILEX_CONFIG_SERVER_OPTS} ${OPENSILEX_RESET_ONTOLOGIES_OPTS}";
        ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_CONFIG_SERVER_OPTS} ${OPENSILEX_RESET_ONTOLOGIES_OPTS}";
      fi
    - echo "Restart server ${OPENSILEX_JAVA_EXEC_OPTS} ${RSYNC_INSTANCES_BIN_PATH}/$REMOTE_SERVER_RSYNC_DIR/opensilex.jar"
    - echo "Stop with options --adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP ${OPENSILEX_STOP_SERVER_OPTS}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_STOP_SERVER_OPTS} --adminPort=$OPENSILEX_JAR_ADMIN_PORT --host=$REMOTE_SERVER_IP"
    - echo "Start with options --adminPort=$OPENSILEX_JAR_ADMIN_PORT --port=$OPENSILEX_JAR_PORT --host=$REMOTE_SERVER_IP ${OPENSILEX_START_SERVER_OPTS}"
    - ssh -i ${HOME}/.ssh/id_rsa -p22 $REMOTE_SERVER_RSYNC_ACCOUNT@$REMOTE_SERVER_IP "cd ${RSYNC_INSTANCES_BIN_PATH}/${REMOTE_SERVER_RSYNC_DIR}; ${OPENSILEX_JAVA_EXEC_OPTS} opensilex.jar ${OPENSILEX_START_SERVER_OPTS} --adminPort=$OPENSILEX_JAR_ADMIN_PORT --port=$OPENSILEX_JAR_PORT --host=$REMOTE_SERVER_IP"
    - AUTOGENERATE_ENVIRONMENT_URL="$REMOTE_SERVER_IP:$OPENSILEX_JAR_PORT"
    - echo "Deploy To $AUTOGENERATE_ENVIRONMENT_URL" # In script, get the environment URL.
    - echo "AUTOGENERATE_ENVIRONMENT_URL=$AUTOGENERATE_ENVIRONMENT_URL" >> deploy.env
  environment:
    name: "$CI_COMMIT_REF_NAME-test"
    url: http://$AUTOGENERATE_ENVIRONMENT_URL
  artifacts:
    reports:
      dotenv: deploy.env

##################
### DEFAULT BUILDS
##################

opensilex-master:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

opensilex-develop:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

opensilex-release:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "release"

##################################
### MERGE REQUESTS CHECK AND BUILD
##################################

# Checks that the merge request is valid. This job fails if one of these conditions is not met :
# - The MR attempts to merge a non-hotfix branch to master
# - The MR attempts to merge a non-feature branch to develop
# - The MR attempts to merge a non-feature branch to release
# - The MR title does not respect the Conventional Commit naming convention
# - The MR has no changelog entry and does not explicitly declare to ignore it
# - The MR has a changelog entry, but at the same time declares to ignore it
# Merge requests marked with the Draft: keyword are checked but subsequent jobs (like merge-request:build) will not
# be triggered.
# No pipeline is triggered for MR from the release branch, because the last release pipeline can be used instead.
#
# The base regex used for checking the Conventional Commit convention was published by @marcojahn on Github :
# https://gist.github.com/marcojahn/482410b728c31b221b70ea6d2c433f0c
# The (Draft: )? part was added at the beginning to allow draft MR to be checked.
#
# The job makes use of curl and yq (https://github.com/mikefarah/yq) to read the YAML changelog entry.
merge-request:check:
  stage: check
  image: alpine
  script:
    # yq and curl are needed for changelog retrieval
    - apk update
    - apk add yq curl
    # check that only "hotfix/*" branches can be merged to master
    - if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" &&
      ! $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^hotfix\/.* ]]; then
    -   echo "Merging from $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME to master is forbidden"
    -   echo "Only a hotfix branch can be merged into master"
    -   echo "To mark this merge request as a hotfix, please make the branch name begin with 'hotfix/'."
    -   exit 1
    - fi
    # check that only "feature/*" or the release branches can be merged to develop
    - if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop" &&
      ! $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^feature\/.* ]]; then
    -   echo "Merging from $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME to develop is forbidden"
    -   echo "Only a feature branch can be merged into develop"
    -   echo "To mark this merge request as a feature, please make the branch name start with 'feature/'."
    -   exit 1
    - fi
    # check that only "feature/*" branches can be merged to release
    - if [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "release" &&
      ! $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^feature\/.* ]]; then
    -   echo "Merging from $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME to release is forbidden"
    -   echo "Only a feature branch can be merged into release"
    -   echo "To mark this merge request as a feature, please make the branch name start with 'feature/'."
    -   exit 1
    - fi
    # check the MR title. Base regex by @marcojahn : https://gist.github.com/marcojahn/482410b728c31b221b70ea6d2c433f0c
    - >-
      CC_REGEX="^(Draft: )?(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\([[:alnum:]._-]+\))?(!)?: ([[:alnum:]])+([[:space:][:print:]]*)"
    - if [[ ! "$CI_MERGE_REQUEST_TITLE" =~ "$CC_REGEX" ]]; then
    -   echo 'The merge request title must respect the Conventional Commit naming convention. Please see 
        https://www.conventionalcommits.org/en/v1.0.0/ for more information.'
    -   exit 1
    - fi
    # query the merge request description to extract changelog and ignore-changelog fields
    - export API_MR_URL="$CI_API_V4_URL/projects/$CI_MERGE_REQUEST_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID"
    - echo $API_MR_URL
    - MR_CONTENT_JSON=$(curl -s -X GET -F "private_token=$JOB_API_TOKEN" $API_MR_URL)
    - ERROR=$(echo $MR_CONTENT_JSON | yq '.error // ""')
    - ERROR_DESCRIPTION=$(echo $MR_CONTENT_JSON | yq '.error_description // ""')
    - if [[ -n "$ERROR" ]]; then
    -   echo 'An error occured while making the query to Gitlab. See the error message below.'
    -   echo "$ERROR - $ERROR_DESCRIPTION"
    -   if [[ "$ERROR" == "invalid_token" ]]; then
    -     echo "About the error ; the token used to query the Gitlab API from the job has maybe expired. In that case,
          please create a new Personnal Access Token (PAT) in your Gitlab account and copy the value into the 
          JOB_API_TOKEN variable in the project CI/CD settings."
    -   fi
    -   exit 1
    - fi
    - FRONT_MATTER=$(echo $MR_CONTENT_JSON
      | yq '.description'
      | yq -f extract -o json '.')
    - CHANGELOG=$(echo $FRONT_MATTER | yq '.changelog // ""')
    - IGNORE_CHANGELOG=$(echo $FRONT_MATTER | yq '.ignore-changelog // ""')
    - echo $CHANGELOG
    - echo $IGNORE_CHANGELOG
    # check that the changelog entry is empty when ignore-changelog is set to true
    - if [[ ${#CHANGELOG} -gt 0 && "$IGNORE_CHANGELOG" == "true" ]]; then
    -   echo 'Changelog description is not empty while "ignore-changelog" is set to "true". This is an
        undefined behaviour ;  either remove the changelog description or set "ignore-changelog" to "false" to resolve
        it, then retry this job.'
    -   exit 1
    # check that the changelog entry is not empty when ignore-changelog is not set to true
    - elif [[ ${#CHANGELOG} -eq 0 && "$IGNORE_CHANGELOG" != "true" ]]; then
    -   echo 'Changelog description is empty while "ignore-changelog" is set to "false". Please fill the
        changelog description or set "ignore-changelog" to "true", then retry this job.'
    -   exit 1
    - fi
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "release"

# Builds the merge request
merge-request:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_MERGE_REQUEST_TITLE !~ /^(Draft:|\[Draft\]|\(Draft\)).*/i && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME != "release"
  needs:
    - job: "merge-request:check"
  tags:
    - stable


####################
### TEST DEPLOYMENTS
####################

#  Deployment of the master branch
test:opensilex-master:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "$DEV_TOOLS_REPO_CONF_FILES_PATH/mistea/master"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4085
    OPENSILEX_JAR_PORT: 8085
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/master"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: on_success
  needs:
    - opensilex-master:build


# Trigger pipeline for the deployment of the develop branch
# - If there is no release branch, then develop is deployed
# - Otherwise, nothing is deployed
#  see deploy_opensilex_template script
test:opensilex-develop:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "$DEV_TOOLS_REPO_CONF_FILES_PATH/mistea/develop"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4081
    OPENSILEX_JAR_PORT: 8081
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/develop"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      when: on_success
  needs:
    - opensilex-develop:build

# Deployment of the release branch
test:opensilex-release:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "$DEV_TOOLS_REPO_CONF_FILES_PATH/mistea/release"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4081
    OPENSILEX_JAR_PORT: 8081
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/release"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
      when: on_success
  needs:
    - opensilex-release:build

#################
### CLOSE RELEASE
#################

opensilex-release:close:
  stage: release
  image: alpine
  script:
    - if [[ -z $RELEASE_TAG ]]; then
    -   echo 'RELEASE_TAG must be set'
    -   exit 1
    - else
    -   echo "Closing release $RELEASE_TAG"
    - fi
    # Install packages git & curl
    - apk update
    - apk add git
    - apk add curl
    # Config & variables
    - RELEASE_COMMIT_MESSAGE="Release $RELEASE_TAG"
    - RELEASE_INTERMEDIATE_BRANCH="release-$RELEASE_TAG"
    - git config user.name "OpenSILEX Team"
    - git config user.email opensilex@gmail.com
    - git remote set-url origin "https://oauth2:$GITLAB_USER_CI_PAT@forgemia.inra.fr/OpenSILEX/opensilex-dev.git"
    # Fetch and unshallows the project
    - git fetch origin --unshallow
    # Remove local tags
    - git tag -l | xargs git tag -d
    - git fetch origin --tags
    # Remove the local branches if necessary
    - if git show-ref --quiet refs/heads/release; then
    -   git branch -D release
    - fi
    - if git show-ref --quiet refs/heads/master; then
    -   git branch -D master
    - fi
    - if git show-ref --quiet refs/heads/$RELEASE_INTERMEDIATE_BRANCH; then
    -   git branch -D $RELEASE_INTERMEDIATE_BRANCH
    - fi
    # Create intermediate branch to avoir conflicts
    - git checkout release
    - git checkout -b $RELEASE_INTERMEDIATE_BRANCH
    - git merge origin/master -s ours --no-edit
    # Merge into master
    - git checkout master
    - git merge $RELEASE_INTERMEDIATE_BRANCH --squash
    - git commit -m "$RELEASE_COMMIT_MESSAGE"
    - git tag -a -m "$RELEASE_COMMIT_MESSAGE" "$RELEASE_TAG"
    # Check that there is no diff between master and release now
    - if ! git diff master release --exit-code; then
    -   echo "Something went wrong with the merge; master and release should be the same but have differences"
    -   exit 1
    - fi
    # Push master and the release tag
    - git push -f origin master
    - git push origin $RELEASE_TAG
    # Trigger the merge request to develop
    - >
      curl -X POST -F "private_token=$JOB_API_TOKEN" -F "source_branch=release"
      -F "target_branch=develop" -F "title=[Release] Merge $RELEASE_TAG into develop"
      -F "remove_source_branch=true" -F "labels[]=finishing release"
      https://forgemia.inra.fr/api/v4/projects/1675/merge_requests
    # Transmit release tag variable to next job (name must be different)
    - echo "PUBLISH_RELEASE_TAG=$RELEASE_TAG" >> opensilex-release:close.env
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
  artifacts:
    reports:
      dotenv:
        - "opensilex-release:close.env"
  needs:
    - job: "opensilex-release:build"
  when: manual

############################
## PUBLISH RELEASE TO GITHUB
############################

opensilex-release:publish:
  stage: release
  image: maven:$MVN_VERSION-eclipse-temurin-$JAVA_VERSION-focal
  script:
    - if [[ -z $PUBLISH_RELEASE_TAG ]]; then
    -   echo 'PUBLISH_RELEASE_TAG must be set'
    -   exit 1
    - else
    -   echo "Publishing release $PUBLISH_RELEASE_TAG"
    - fi
    # Install packages curl & jq
    - apt-get update
    - apt-get install -y curl
    - apt-get install -y jq
    # Remove local tags & fetch them again
    - git tag -l | xargs git tag -d
    - git fetch origin --tags
    # Checkout the release tag & build with the correct revision
    - git checkout $PUBLISH_RELEASE_TAG
    - mvn clean install $MVN_PROFILE $MAVEN_CLI_OPTS -Drevision=$PUBLISH_RELEASE_TAG -DskipTests=true
    # Extract release description from changelog
    # The CHANGELOG.md file should have a section starting with "## [$PUBLISH_RELEASE_TAG]", for example "## [1.0.0-rc+4]"
    # Otherwise, "Missing release notes" will be set as the release description
    - echo "Try to extract the release description from changelog..."
    - RELEASE_DESCRIPTION=$(sed -n  "/^## \[${PUBLISH_RELEASE_TAG}\]/,/^## /p" CHANGELOG.md | head -n -1 | jq -Rsa .)
    - if [[ "$RELEASE_DESCRIPTION" == '""' ]]; then
    -   echo "Missing release description for tag $PUBLISH_RELEASE_TAG in the changelog. Please change it later in the Github repository."
    -   RELEASE_DESCRIPTION="\"# [$PUBLISH_RELEASE_TAG] - $(date --iso-8601)\n\nMissing release notes\n\""
    - fi
    # Headers for the queries
    - AUTHORIZATION="$GITHUB_API_ACCOUNT:$GITHUB_API_TOKEN"
    - 'ACCEPTS_HEADER="Accept: application/vnd.github+json"'
    # JSON payload for the creation query
    # NB : the 'RELEASE_DESCRIPTION' variable already contains the quotes (thanks to jq), that's why they're omitted here
    - 'CREATE_QUERY_PAYLOAD="{\"tag_name\":\"$PUBLISH_RELEASE_TAG\",\"name\":\"$PUBLISH_RELEASE_TAG\",\"body\":$RELEASE_DESCRIPTION}"'
    # Create the release
    - 'echo "\"curl -u \"$AUTHORIZATION\" -X POST -H \"$ACCEPTS_HEADER\" -d \"$CREATE_QUERY_PAYLOAD\" https://api.github.com/repos/OpenSILEX/opensilex/releases"'
    - CREATE_RESPONSE=$(curl -u "$AUTHORIZATION" -X POST -H "$ACCEPTS_HEADER" -d "$CREATE_QUERY_PAYLOAD" https://api.github.com/repos/OpenSILEX/opensilex/releases)
    - echo $CREATE_RESPONSE
    # Asset file
    - FILENAME=opensilex-release-$PUBLISH_RELEASE_TAG.zip
    - FILEPATH=opensilex-release/target/$FILENAME
    # Extract the asset upload URL from the response
    # The URL is formatted like this : https://uploads.github.com/repos/OpenSILEX/opensilex/releases/73752399/assets{?name,label}
    # So the last part must be replaced with a valid query parameter (only ?name is required)
    - UPLOAD_URL=$(echo $CREATE_RESPONSE | jq -r .upload_url | sed -e "s/{.*}/\?name=${FILENAME}/g")
    # Upload the asset file
    - 'echo "curl -u \"$AUTHORIZATION\" -X POST -H \"$ACCEPTS_HEADER\" -H "Content-Type: application/zip" -T \"$FILEPATH\" \"$UPLOAD_URL\""'
    - 'curl -u "$AUTHORIZATION" -X POST -H "$ACCEPTS_HEADER" -H "Content-Type: application/zip" -T "$FILEPATH" "$UPLOAD_URL"'
  rules:
    - if: $CI_COMMIT_BRANCH == "release"
  needs:
    - job: "opensilex-release:close"
      artifacts: true


# Update nightly builds branch
update:nightly:builds:branch:
  stage: build
  script:
    - apt update && apt install -y git
    - git config --global user.name "anonymous"
    - git config --global user.email "anonymous@opensilex.org"
    - git remote set-url origin "https://oauth2:$GITLAB_USER_CI_PAT@forgemia.inra.fr/OpenSILEX/opensilex-dev.git"
    - if [  -z "`git show-ref refs/heads/nightly-builds`" ]; then  echo 'branch nightly-builds will be created!' &&  git checkout -b nightly-builds; else git checkout nightly-builds ;fi
    - git fetch origin
    - git reset --hard origin/develop
    - git push -f origin nightly-builds
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

###############################################
##  BUILD - TESTS WITH DIFFERENT MAVEN VERSIONS
###############################################

##  BUILD TEMPLATE
.test:build: &test_build_on_schedules
  <<: *cache_dependencies
  before_script:
    - if [ -z "$JAVA_VERSION" ]; then echo "Missing JAVA_VERSION variable"; exit 1; fi
    - if [ -z "$MVN_VERSION" ]; then echo "Missing MVN_VERSION variable"; exit 1; fi
    - if [ ! -z $MVN_PROFILE ]; then
    -   MVN_PROFILE="-P $MVN_PROFILE"
    -   echo "$MVN_PROFILE will be used"
    - fi
    - echo "with_java $JAVA_VERSION and maven $MVN_VERSION with latest version of OpenSILEX/opensilex-dev"
    - apt-get update && apt-get install -y git
  stage: build
  image: maven:$MVN_VERSION-eclipse-temurin-$JAVA_VERSION
  script:
    - mvn clean install $MVN_PROFILE $MAVEN_OPTS -Drevision=$OPENSILEX_APP_REVISION
    - ls $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION
    - mv $OPENSILEX_BUILD_PATH/opensilex-release-$OPENSILEX_APP_REVISION $OPENSILEX_APP_REVISION
  rules:
    - if: $NIGHTLY_BUILD == "true"

##  BUILD VERSIONS # example https://gitlab.com/gitlab-org/gitlab-foss/issues/13755
 

.with_java11: &java11
  variables:
    JAVA_VERSION: 11
    MVN_PROFILE: "for-java-11" 
    
.with_java21: &java21
  variables:
    JAVA_VERSION: 21  

test:build:java11: 
  <<: *java11
  <<: *test_build_on_schedules


test:build:java21:
  <<: *java21
  <<: *test_build_on_schedules

#test:build:java17:
#  <<: *java17
#  <<: *test_build_on_schedules

########################
##  BUILD - GITLAB PAGES DOCS
########################

pages:
  <<: *test_build_on_schedules
  script:
    - ln -s $JAVA_HOME java.home
    - mkdir logs
    - cd $CI_PROJECT_DIR/opensilex-swagger-codegen-maven-plugin
    - mvn install $MAVEN_OPTS_SCHUEDULES 1> $CI_PROJECT_DIR/logs/mvn-install-swagger.log
    - cd $CI_PROJECT_DIR
    - mvn install site $MAVEN_OPTS_SCHUEDULES -Pwith-test-report -Pwith-security-check -DskipFrontBuild -pl '!opensilex-dev-tools' > $CI_PROJECT_DIR/logs/mvn-install-site.log
    - mkdir public
    - mv $CI_PROJECT_DIR/opensilex-doc/src/main/resources/generated/* public
  artifacts:
    paths:
      - public
      - logs
    when: always
  rules:
    - if: $NIGHTLY_BUILD == "true"
  allow_failure: true

# ##########################################
# ##  BUILD & DEPLOY FOR MISTEA TEAM
# ##########################################

###################################
##  DEMO-BUILD-DEPLOYMENT
###################################

demo:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "demo"

###################################
##  MAX-TEST-SNAPSHOT-DEPLOYMENT
###################################

test:maximilian:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/maximilian2"

test:maximilian:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/maximilian"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4084
    OPENSILEX_JAR_PORT: 8084
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/maximilian"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/maximilian2"
      when: on_success
  needs:
    - test:maximilian:build

###################################
##  ARNAUD-TEST-BUILD-DEPLOYMENT
###################################

test:arnaud:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/arnaud"

test:arnaud:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/arnaud"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4086
    OPENSILEX_JAR_PORT: 8086
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/arnaud"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/arnaud"
      when: on_success
  needs:
    - test:arnaud:build

###################################
##  YVAN-TEST-BUILD-DEPLOYMENT
###################################

test:yvan:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/yvan"
  tags:
    - stable

test:yvan:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/yvan"
    INSTANCE_CONFIGURATION_FILE_NAME: "opensilex.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4083
    OPENSILEX_JAR_PORT: 8083
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/yvan"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/yvan"
      when: on_success
  tags:
    - stable
  needs:
    - test:yvan:build

###################################
##  VALENTIN-TEST-BUILD-DEPLOYMENT
###################################

test:valentin:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/valentin"

test:valentin:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/valentin"
    INSTANCE_CONFIGURATION_FILE_NAME: "valentin.opensilex.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4096
    OPENSILEX_JAR_PORT: 8096
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/valentin"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/valentin"
      when: on_success
  needs:
    - test:valentin:build

###################################
##  DHRUTHI-TEST-BUILD-DEPLOYMENT
###################################

test:dhruthi:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/dhruthi"

test:dhruthi:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/dhruthi"
    INSTANCE_CONFIGURATION_FILE_NAME: "dhruthi.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4091
    OPENSILEX_JAR_PORT: 8091
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/dhruthi"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/dhruthi"
      when: on_success
  needs:
    - test:dhruthi:build

###################################
##  GABRIEL-TEST-BUILD-DEPLOYMENT
###################################

test:gabriel:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/gabriel"

test:gabriel:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/gabriel"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4091
    OPENSILEX_JAR_PORT: 8091
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/gabriel"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/gabriel"
      when: on_success
  needs:
    - test:gabriel:build

######################################
##  OPTIMIZATION-TEST-BUILD-DEPLOYMENT
######################################

test:optimization:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/optimization"

test:optimization:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/optimization"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4081
    OPENSILEX_JAR_PORT: 8081
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_BENCHMARK_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/optimization"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/optimization"
      when: on_success
  needs:
    - test:optimization:build

###################################
##  SEBASTIEN-TEST-BUILD-DEPLOYMENT
###################################

test:sebastien:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/sebastien"

test:sebastien:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/sebastien"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4089
    OPENSILEX_JAR_PORT: 8089
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/sebastien"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/sebastien"
      when: on_success
  needs:
    - test:sebastien:build

###################################
##  TEMP2-TEST-BUILD-DEPLOYMENT
###################################

test:temporary2:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary2"

test:temporary2:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/temporary2"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4100
    OPENSILEX_JAR_PORT: 8100
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/temporary2"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary2"
      when: on_success
  needs:
    - test:temporary2:build

###################################
##  alexiaChiavarino-TEST-BUILD-DEPLOYMENT
###################################

test:alexiaChiavarino:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/alexia"
  tags:
    - stable

test:alexiaChiavarino:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/alexia"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4087
    OPENSILEX_JAR_PORT: 8087
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/alexia"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/alexia"
      when: on_success
  tags:
    - stable
  needs:
    - test:alexiaChiavarino:build

###################################
##  RENAUD-TEST-BUILD-DEPLOYMENT
###################################

test:renaud:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/renaud"

test:renaud:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/renaud"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4088
    OPENSILEX_JAR_PORT: 8088
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/renaud"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/renaud"
      when: on_success
  needs:
    - test:renaud:build

###################################
## TEMPORARY-TEST-BUILD-DEPLOYMENT
###################################

test:temporary1:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary1"

test:temporary1:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/temporary1"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4092
    OPENSILEX_JAR_PORT: 8092
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/temporary1"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary1"
      when: on_success
  needs:
    - test:temporary1:build

###################################
##  EMILIE-TEST-SNAPSHOT-DEPLOYMENT
###################################

test:emilie:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/emilie"

test:emilie:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/emilie"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4094
    OPENSILEX_JAR_PORT: 8094
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/emilie"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/emilie"
      when: on_success
  needs:
    - test:emilie:build

# ##########################################
# ##  BUILD & DEPLOY FOR PARTNERS TEAMS
# ##########################################

###################################
##  BRICE-TEST-BUILD-DEPLOYMENT
###################################

test:temporary3:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary3"

test:temporary3:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/brice"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4090
    OPENSILEX_JAR_PORT: 8090
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: "$REMOTE_TEST_SERVER_IP"
    REMOTE_SERVER_RSYNC_DIR: "mistea/brice"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary3"
      when: on_success
  needs:
    - test:temporary3:build

#######################################
##  TEMPORARY4-TEST-SNAPSHOT-DEPLOYMENT
#######################################

test:temporary4:build:
  <<: *build_template_with_opensilex
  variables:
    MAVEN_SKIP_TESTS: "true"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary4"

test:temporary4:deploy:
  <<: *deploy_opensilex_before_script
  <<: *deploy_opensilex_template
  variables:
    CONFIGS_FILES_DIR_PATH: "${DEV_TOOLS_REPO_CONF_FILES_PATH}/mistea/temporary4"
    INSTANCE_CONFIGURATION_FILE_NAME: "phis.test.yml"
    OPENSILEX_JAR_ADMIN_PORT: 4098
    OPENSILEX_JAR_PORT: 8098
    REMOTE_SERVER_RSYNC_ACCOUNT: "$REMOTE_PHIS_RSYNC_ACCOUNT"
    REMOTE_SERVER_IP: $REMOTE_TEST_SERVER_IP
    REMOTE_SERVER_RSYNC_DIR: "mistea/temporary4"
    REMOTE_SERVER_SSH_KEY: "$TEST_SSH_PRIVATE_KEY"
  rules:
    - if: $CI_COMMIT_BRANCH == "test/temporary4"
      when: on_success
  needs:
    - test:temporary4:build

######################################
##  PHENO3C-PROD-BUILD-DEPLOYMENT
######################################

pheno3c:build:
  <<: *build_template_with_opensilex
  rules:
    - if: $CI_COMMIT_BRANCH == "pheno3c"
