<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
******************************************************************************
 OpenSILEX - Licence AGPL V3.0 - https://www.gnu.org/licenses/agpl-3.0.en.html
 Copyright Â© INRA 2019
 Contact: vincent.migot@inra.fr, anne.tireau@inra.fr, pascal.neveu@inra.fr
 
 OpenSilex parent pom.xml for all submodules
 It contains all common dependencies versions and declaration.
 It contains also the common build configuration for all submodules.
 If you add a new common dependency, please add it here and declare it's
 version as a variable in the <properties> section.
******************************************************************************
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.opensilex</groupId>
    <artifactId>opensilex-parent</artifactId>
    <packaging>pom</packaging>
    <version>${revision}</version>

    <name>opensilex-parent</name>

    <url>https://www.opensilex.org/</url>

    <properties>
        <!-- common projects version -->
        <revision>BUILD-SNAPSHOT</revision>
        
        <!-- global encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        
        <!-- generated doc site output directory -->
        <generated.doc.site.directory>opensilex-doc/src/main/resources/generated</generated.doc.site.directory>
        
        <!-- build variation flags -->
        <skipFrontBuild>false</skipFrontBuild>
        <skipFrontAudit>true</skipFrontAudit>
        <skipIntegrationTest>false</skipIntegrationTest>
        <skipTypeScriptLibBuild>false</skipTypeScriptLibBuild>
        <skipFrontLibInstall>false</skipFrontLibInstall>
        <skipFrontTypesGeneration>false</skipFrontTypesGeneration>
        <ignoreMavenPluginVersion>false</ignoreMavenPluginVersion>
        
        <!-- Front-end Node & Yarn version -->
        <node.version>v12.13.1</node.version>
        <yarn.version>v1.19.2</yarn.version>
        
        <!-- Java supported version -->
        <java.compiler.version>1.8</java.compiler.version>
        
        <!-- Minimal maven version -->
        <maven.minimal.version>3.5</maven.minimal.version>
        
        <!-- dependencies version -->
        <jersey.version>2.32</jersey.version>
        <tomcat.version>9.0.39</tomcat.version>
        <hibernate.validator.version>6.1.6.Final</hibernate.validator.version>
        <jackson.version>2.12.0</jackson.version>
        <geojson.jackson.version>1.14</geojson.jackson.version>
        <jts.version>1.17.1</jts.version>
        <javax.servlet.api.version>4.0.1</javax.servlet.api.version>
        <swagger.jersey2.jaxrs.version>1.6.2</swagger.jersey2.jaxrs.version>
        <commons.jcs.cache.version>2.2.1</commons.jcs.cache.version>
        <maven.resolver.version>1.6.1</maven.resolver.version>
        <maven.resolver.provider.version>3.6.3</maven.resolver.provider.version>
        <rdf4j.version>3.4.3</rdf4j.version>
        <jena.query.builder.version>3.16.0</jena.query.builder.version>
        <mongodb.version>4.1.1</mongodb.version>
        <bytebuddy.version>1.10.18</bytebuddy.version>
        <java.jwt.version>3.11.0</java.jwt.version>
        <picocli.version>4.5.2</picocli.version>
        <bcript.version>0.9.0</bcript.version>
        <commons.io.version>2.8.0</commons.io.version>
        <logback.version>1.2.3</logback.version>
        <janino.version>3.1.2</janino.version>
        <slf4j.api.version>1.7.30</slf4j.api.version>
        <javax.xml.bind.version>2.3.1</javax.xml.bind.version>
        <javax.mail.api.version>1.6.2</javax.mail.api.version>
        <javax.mail.version>1.6.2</javax.mail.version>
        <jaxb.version>2.3.0.1</jaxb.version>
        <jaxb.impl.version>2.3.2</jaxb.impl.version>
        <javax.activation.api.version>1.2.0</javax.activation.api.version>
        <reflections.version>0.9.12</reflections.version>
        <httpclient.version>4.5.13</httpclient.version>
        <httpcore.version>4.4.14</httpcore.version>
        <cdi.api.version>2.0.SP1</cdi.api.version>
        <javaee.web.api.version>8.0.1</javaee.web.api.version>
        <apache.tika.version>1.25</apache.tika.version>
        
        <!-- test only dependencies version -->
        <junit.version>4.13.1</junit.version>
        <mockito.version>3.6.28</mockito.version>
        <embed.mongo.version>3.0.0</embed.mongo.version>
        <awaitability.version>4.0.3</awaitability.version>
        
        <!-- maven plugins versions -->
        <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
        <maven.deploy.plugin.version>3.0.0-M1</maven.deploy.plugin.version>
        <maven.install.plugin.version>3.0.0-M1</maven.install.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
        <maven.jar.plugin.version>3.1.2</maven.jar.plugin.version>
        <maven.surefire.plugin.version>3.0.0-M3</maven.surefire.plugin.version>
        <maven.failsafe.plugin.version>3.0.0-M4</maven.failsafe.plugin.version>
        <maven.resources.plugin.version>3.1.0</maven.resources.plugin.version>
        <maven.antrun.plugin.version>1.8</maven.antrun.plugin.version>
        <maven.site.plugin.version>3.8.2</maven.site.plugin.version>
        <maven.assembly.plugin.version>3.1.1</maven.assembly.plugin.version>
        <maven.archetype.plugin.version>3.1.2</maven.archetype.plugin.version>
        <maven.dependency.plugin.version>3.1.1</maven.dependency.plugin.version>
        <maven.shade.plugin.version>3.2.1</maven.shade.plugin.version>
        <versions.maven.plugin.version>2.7</versions.maven.plugin.version>
        <flatten.maven.plugin.version>1.1.0</flatten.maven.plugin.version>
        <properties.maven.plugin.version>1.0.0</properties.maven.plugin.version>
        <serviceloader.maven.plugin.version>1.1.0</serviceloader.maven.plugin.version>
        <jacoco.maven.plugin.version>0.8.5</jacoco.maven.plugin.version>
        <owasp.dependency.check.maven.plugin.version>5.3.2</owasp.dependency.check.maven.plugin.version>
        <frontend.maven.plugin.version>1.10.0</frontend.maven.plugin.version>
        <maven.project.info.reports.plugin.version>3.0.0</maven.project.info.reports.plugin.version>
        <maven.javadoc.plugin.version>3.1.1</maven.javadoc.plugin.version>
        <maven.exec.plugin.version>3.0.0</maven.exec.plugin.version>
        <maven.pmd.plugin.version>3.13.0</maven.pmd.plugin.version>
        <maven.surefire.report.plugin.version>3.0.0-M3</maven.surefire.report.plugin.version>
        <maven.jxr.plugin.version>3.0.0</maven.jxr.plugin.version>
        <maven.processor.plugin.version>4.4</maven.processor.plugin.version>
        <spotbugs.maven.plugin.version>3.1.12.2</spotbugs.maven.plugin.version>
        <logstash-logback-encoder>6.5</logstash-logback-encoder>
    </properties>

    <dependencyManagement>
        <!--Jersey dependency management--> 
        <dependencies>
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${jersey.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!--CLI--> 
        <dependency>
            <groupId>info.picocli</groupId>
            <artifactId>picocli</artifactId>
            <version>${picocli.version}</version>
        </dependency>
        
        <!--Embedded Tomcat Server--> 
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-core</artifactId>
            <version>${tomcat.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <version>${tomcat.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-websocket</artifactId>
            <version>${tomcat.version}</version>
        </dependency>
        
        <!--Maven Dependency resolver--> 
        <dependency>
            <groupId>org.apache.maven.resolver</groupId>
            <artifactId>maven-resolver-api</artifactId>
            <version>${maven.resolver.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.resolver</groupId>
            <artifactId>maven-resolver-impl</artifactId>
            <version>${maven.resolver.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.resolver</groupId>
            <artifactId>maven-resolver-connector-basic</artifactId>
            <version>${maven.resolver.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.resolver</groupId>
            <artifactId>maven-resolver-transport-file</artifactId>
            <version>${maven.resolver.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.resolver</groupId>
            <artifactId>maven-resolver-transport-http</artifactId>
            <version>${maven.resolver.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-resolver-provider</artifactId>
            <version>${maven.resolver.provider.version}</version>
        </dependency>
        
        <!--BCrypt--> 
        <dependency>
            <groupId>at.favre.lib</groupId>
            <artifactId>bcrypt</artifactId>
            <version>${bcript.version}</version>
        </dependency>
        
        <!-- Reflection utils -->
        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections</artifactId>
            <version>${reflections.version}</version>
        </dependency>
        
        <!--Proxy class library--> 
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <version>${bytebuddy.version}</version>
        </dependency>
        
        <!--RDF4J--> 
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-client</artifactId>
            <version>${rdf4j.version}</version>
            <type>pom</type>
        </dependency>  
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-repository-http</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-repository-sail</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>          
        
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-sail-inferencer</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-shacl</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>   
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-sail-nativerdf</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>  
        <dependency>
            <groupId>org.eclipse.rdf4j</groupId>
            <artifactId>rdf4j-sail-memory</artifactId>
            <version>${rdf4j.version}</version>
        </dependency>  

        <!-- Apache-Tika - Used for file mime type detection -->
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-core</artifactId>
            <version>${apache.tika.version}</version>
        </dependency>
        
        <!--JWT--> 
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>${java.jwt.version}</version>
        </dependency>
        
        <!--Logger--> 
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>${logback.version}</version>
        </dependency>
        
        <!--logback encoder for logstash-->
        <dependency> 
            <groupId>net.logstash.logback</groupId> 
            <artifactId>logstash-logback-encoder</artifactId> 
            <version>${logstash-logback-encoder}</version> 
        </dependency>
        
        <!--allow condition evaluation in logback configuration file--> 
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>${janino.version}</version>
        </dependency>
        
        <!--Jersey--> 
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        
        <!--Jersey Validation extension --> 
        <dependency>
            <groupId>org.glassfish.jersey.ext</groupId>
            <artifactId>jersey-bean-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <version>${cdi.api.version}</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.ext.cdi</groupId>
            <artifactId>jersey-cdi1x</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>${httpcore.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>${javaee.web.api.version}</version>
            <scope>provided</scope>
        </dependency>
        
        <!--Jackson JSON & YAML--> 
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-yaml</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jdk8</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-csv</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <version>${hibernate.validator.version}</version>
        </dependency>
        
        <!-- GeoJSON jackson support --> 
        <dependency>
            <groupId>de.grundid.opendatalab</groupId>
            <artifactId>geojson-jackson</artifactId>
            <version>${geojson.jackson.version}</version>
        </dependency>
        
        <!-- WKT Support -->
        <dependency>
            <groupId>org.locationtech.jts</groupId>
            <artifactId>jts-core</artifactId>
            <version>${jts.version}</version>
        </dependency>
        <dependency>
            <groupId>org.locationtech.jts.io</groupId>
            <artifactId>jts-io-common</artifactId>
            <version>${jts.version}</version>
        </dependency>

        
        <!--Servlet API v4 provided by Tomcat--> 
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${javax.servlet.api.version}</version>
            <scope>provided</scope>
        </dependency>
        
        <!--Swagger--> 
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jersey2-jaxrs</artifactId>
            <version>${swagger.jersey2.jaxrs.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Cache library --> 
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-jcs</artifactId>
            <version>${commons.jcs.cache.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-jcs-core</artifactId>
            <version>${commons.jcs.cache.version}</version>
        </dependency>


        <!--Java extension compatibility for JDK 9+--> 
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>${javax.xml.bind.version}</version>
        </dependency>
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
            <version>${javax.mail.api.version}</version>
        </dependency>
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>${javax.mail.version}</version>
        </dependency>

        <!--Logger--> 
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.api.version}</version>
        </dependency>
        
        <!--SPARQL Jena--> 
        <dependency>
            <groupId>org.apache.jena</groupId>
            <artifactId>jena-querybuilder</artifactId>
            <version>${jena.query.builder.version}</version>
        </dependency>
        
        <!--File IO management--> 
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons.io.version}</version>
        </dependency>
        
        <!--Unit tests--> 
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework</groupId>
            <artifactId>jersey-test-framework-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.test-framework.providers</groupId>
            <artifactId>jersey-test-framework-provider-grizzly2</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!--Unit tests mocking framework--> 
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!-- MongoDB test container --> 
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
            <version>${embed.mongo.version}</version>
            <scope>test</scope>
        </dependency>
        
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <version>${awaitability.version}</version>
            <scope>test</scope>
        </dependency>
        
        <!--MongoDB drivers--> 
        <dependency>
            <groupId>org.mongodb</groupId>
            <artifactId>mongodb-driver-sync</artifactId>
            <version>${mongodb.version}</version>
        </dependency> 
    </dependencies>

    <build>
        <!-- define front resources folder -->
        <resources>
            <!-- Default resources folder -->
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>front</directory>
                <excludes>
                    <exclude>**</exclude>
                </excludes>
            </resource>
        </resources>
        
        <!-- Used maven plugins definitions -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven.install.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven.enforcer.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven.jar.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <configuration>
                        <trimStackTrace>false</trimStackTrace>
                        <useFile>false</useFile>
                        <reuseForks>true</reuseForks>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>${maven.assembly.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-archetype-plugin</artifactId>
                    <version>${maven.archetype.plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>integration-test</phase>
                            <configuration>
                                <skip>true</skip>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven.dependency.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven.shade.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>versions-maven-plugin</artifactId>
                    <version>${versions.maven.plugin.version}</version>
              
                    <configuration>
                        <skip>${ignoreMavenPluginVersion}</skip>
                    </configuration>
                    
                    <executions>
                        <execution>
                            <phase>generate-resources</phase>
                            <goals>
                                <goal>display-dependency-updates</goal>
                                <goal>display-plugin-updates</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${flatten.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>${properties.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>eu.somatik.serviceloader-maven-plugin</groupId>
                    <artifactId>serviceloader-maven-plugin</artifactId>
                    <version>${serviceloader.maven.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.owasp</groupId>
                    <artifactId>dependency-check-maven</artifactId>
                    <version>${owasp.dependency.check.maven.plugin.version}</version>
                    <configuration>
                        <assemblyAnalyzerEnabled>false</assemblyAnalyzerEnabled>
                        <nodeAnalyzerEnabled>false</nodeAnalyzerEnabled>
                        <nodeAuditAnalyzerEnabled>false</nodeAuditAnalyzerEnabled>
                    </configuration>
                </plugin>
                <!-- Generate swagger.json file -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${maven.exec.plugin.version}</version>
                    <executions>
                        <execution>
                            <phase>compile</phase>
                            <goals>
                                <goal>java</goal>
                            </goals>
                            <configuration>
                                <cleanupDaemonThreads>false</cleanupDaemonThreads>
                                <mainClass>org.opensilex.utils.SwaggerAPIGenerator</mainClass>
                                <arguments>
                                    <argument>${project.basedir}/src/main/java/</argument>
                                    <argument>${project.basedir}/front/src/lib/swagger.json</argument>
                                </arguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Generate TypeScript library from swagger.json file -->
                <plugin>
                    <groupId>org.opensilex</groupId>
                    <artifactId>opensilex-swagger-codegen-maven-plugin</artifactId>
                    <version>${revision}</version>
                    
                    <configuration>
                        <skip>${skipTypeScriptLibBuild}</skip>
                    </configuration>
                    
                    <executions>
                        <execution>
                            <phase>compile</phase>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                            <configuration>
                                <inputSpec>${project.basedir}/front/src/lib/swagger.json</inputSpec>
                                <templateDirectory>${project.basedir}/../opensilex-main/src/main/resources/swagger/templates/typescript-inversify</templateDirectory>
                                <language>typescript-inversify</language>
                                <output>${project.basedir}/front/src/lib/</output>
                                <configOptions>
                                    <packageName>${project.name}</packageName>
                                    <packageVersion>${revision}</packageVersion>
                                    <npmName>${project.name}</npmName>
                                    <usePromise>true</usePromise>
                                    <useHttpClient>true</useHttpClient>
                                    <modelPropertyNaming>original</modelPropertyNaming>
                                </configOptions>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Front Node & Yarn management -->
                <plugin>
                    <groupId>com.github.eirslett</groupId>
                    <artifactId>frontend-maven-plugin</artifactId>
                    <version>${frontend.maven.plugin.version}</version>
                        
                    <configuration>
                        <nodeVersion>${node.version}</nodeVersion>
                        <yarnVersion>${yarn.version}</yarnVersion>
                        <installDirectory>../.node</installDirectory>
                        <workingDirectory>front</workingDirectory>
                    </configuration>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven.site.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                </plugin>
                
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>3.1.1</version>
                    <configuration>
                        <outputFile>../${generated.doc.site.directory}/${project.name}/checkstyle-result.xml</outputFile>
                        <outputDirectory>../${generated.doc.site.directory}/${project.name}/checkstyle/</outputDirectory>
                        <consoleOutput>true</consoleOutput>
                        <logViolationsToConsole>true</logViolationsToConsole>
                        <checkstyleRules>
                            <module name="Checker">
                                <!--
                                    If you set the basedir property below, then all reported file
                                    names will be relative to the specified directory. See
                                    https://checkstyle.org/5.x/config.html#Checker
                            
                                    <property name="basedir" value="${basedir}"/>
                                -->
                                <property name="severity" value="warning"/>

                                <property name="fileExtensions" value="java, properties, xml"/>

                                <!-- Excludes all 'module-info.java' files              -->
                                <!-- See https://checkstyle.org/config_filefilters.html -->
                                <module name="BeforeExecutionExclusionFileFilter">
                                    <property name="fileNamePattern" value="module\-info\.java$"/>
                                </module>

                                <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->
                                <module name="SuppressionFilter">
                                    <property name="file" value="${org.checkstyle.sun.suppressionfilter.config}"
                                              default="checkstyle-suppressions.xml" />
                                    <property name="optional" value="true"/>
                                </module>

                                <!-- Checks whether files end with a new line.                        -->
                                <!-- See https://checkstyle.org/config_misc.html#NewlineAtEndOfFile -->
                                <module name="NewlineAtEndOfFile"/>

                                <!-- Checks that property files contain the same keys.         -->
                                <!-- See https://checkstyle.org/config_misc.html#Translation -->
                                <module name="Translation"/>

                                <!-- Checks for Size Violations.                    -->
                                <!-- See https://checkstyle.org/config_sizes.html -->
                                <module name="FileLength"/>
                                <module name="LineLength">
                                    <property name="fileExtensions" value="java"/>
                                    <property name="max" value="150"/>
                                </module>

                                <!-- Checks for whitespace                               -->
                                <!-- See https://checkstyle.org/config_whitespace.html -->
                                <module name="FileTabCharacter"/>

                                <!-- Miscellaneous other checks.                   -->
                                <!-- See https://checkstyle.org/config_misc.html -->
                                <module name="RegexpSingleline">
                                    <property name="format" value="\s+$"/>
                                    <property name="minimum" value="0"/>
                                    <property name="maximum" value="0"/>
                                    <property name="message" value="Line has trailing spaces."/>
                                </module>

                                <!-- Checks for Headers                                -->
                                <!-- See https://checkstyle.org/config_header.html   -->
                                <!-- <module name="Header"> -->
                                <!--   <property name="headerFile" value="${checkstyle.header.file}"/> -->
                                <!--   <property name="fileExtensions" value="java"/> -->
                                <!-- </module> -->

                                <module name="TreeWalker">

                                    <!-- Checks for Javadoc comments.                     -->
                                    <!-- See https://checkstyle.org/config_javadoc.html -->
                                    <module name="InvalidJavadocPosition"/>
                                    <module name="JavadocMethod">
                                        <property name="allowedAnnotations" value="Override, Test, Before, After, BeforeClass, AfterClass, ConfigDescription"/>
                                    </module>
                                    <module name="JavadocType"/>
                                    <module name="JavadocVariable"/>
                                    <module name="JavadocStyle"/>
                                    <module name="MissingJavadocMethod">
                                        <property name="allowedAnnotations" value="Override, Test, Before, After, BeforeClass, AfterClass, ConfigDescription"/>
                                    </module>
                                    
                                    <!-- Checks for Naming Conventions.                  -->
                                    <!-- See https://checkstyle.org/config_naming.html -->
                                    <module name="ConstantName"/>
                                    <module name="LocalFinalVariableName"/>
                                    <module name="LocalVariableName"/>
                                    <module name="MemberName"/>
                                    <module name="MethodName"/>
                                    <module name="PackageName"/>
                                    <module name="ParameterName"/>
                                    <module name="StaticVariableName"/>
                                    <module name="TypeName"/>

                                    <!-- Checks for imports                              -->
                                    <!-- See https://checkstyle.org/config_import.html -->
                                    <module name="AvoidStarImport"/>
                                    <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
                                    <module name="RedundantImport"/>
                                    <module name="UnusedImports">
                                        <property name="processJavadoc" value="false"/>
                                    </module>

                                    <!-- Checks for Size Violations.                    -->
                                    <!-- See https://checkstyle.org/config_sizes.html -->
                                    <module name="MethodLength"/>
                                    <module name="ParameterNumber"/>

                                    <!-- Checks for whitespace                               -->
                                    <!-- See https://checkstyle.org/config_whitespace.html -->
                                    <module name="EmptyForIteratorPad"/>
                                    <module name="GenericWhitespace"/>
                                    <module name="MethodParamPad"/>
                                    <module name="NoWhitespaceAfter"/>
                                    <module name="NoWhitespaceBefore"/>
                                    <module name="OperatorWrap"/>
                                    <module name="ParenPad"/>
                                    <module name="TypecastParenPad"/>
                                    <module name="WhitespaceAfter"/>
                                    <module name="WhitespaceAround"/>

                                    <!-- Checks for blocks. You know, those {}'s         -->
                                    <!-- See https://checkstyle.org/config_blocks.html -->
                                    <module name="AvoidNestedBlocks"/>
                                    <module name="EmptyBlock"/>
                                    <module name="LeftCurly"/>
                                    <module name="NeedBraces"/>
                                    <module name="RightCurly"/>

                                    <!-- Checks for common coding problems               -->
                                    <!-- See https://checkstyle.org/config_coding.html -->
                                    <module name="EmptyStatement"/>
                                    <module name="EqualsHashCode"/>
                                    <module name="IllegalInstantiation"/>
                                    <module name="InnerAssignment"/>
                                    <module name="MagicNumber"/>
                                    <module name="MissingSwitchDefault"/>
                                    <module name="MultipleVariableDeclarations"/>
                                    <module name="SimplifyBooleanExpression"/>
                                    <module name="SimplifyBooleanReturn"/>

                                    <!-- Checks for class design                         -->
                                    <!-- See https://checkstyle.org/config_design.html -->
                                    <module name="FinalClass"/>
                                    <module name="HideUtilityClassConstructor"/>
                                    <module name="InterfaceIsType"/>

                                    <!-- Miscellaneous other checks.                   -->
                                    <!-- See https://checkstyle.org/config_misc.html -->
                                    <module name="ArrayTypeStyle"/>
                                    <module name="TodoComment"/>
                                    <module name="UpperEll"/>

                                    <!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter -->
                                    <module name="SuppressionXpathFilter">
                                        <property name="file" value="${org.checkstyle.sun.suppressionxpathfilter.config}"
                                                  default="checkstyle-xpath-suppressions.xml" />
                                        <property name="optional" value="true"/>
                                    </module>

                                </module>

                            </module>
                        </checkstyleRules>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>4.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
        
        <plugins>
            <!--Default maven plugin for java compatibility version --> 
            <!-- Clear java cache when annotations change -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.compiler.version}</source>
                    <target>${java.compiler.version}</target>
                    <compilerArgument>-proc:none</compilerArgument>
                    <!--                    <compilerArgs>
                        <arg>-Xlint:all</arg>
                    </compilerArgs>-->
                    <!-- Add hibernate validation -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.hibernate.validator</groupId>
                            <artifactId>hibernate-validator-annotation-processor</artifactId>
                            <version>${hibernate.validator.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            
            <!--check minimal maven version--> 
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>${maven.minimal.version}</version>
                                </requireMavenVersion>
                            </rules>    
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!--Flatten pom (ie: merge with opensilex-parent) to allow single module build--> 
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <outputDirectory>${basedir}/target/classes</outputDirectory>
                    <flattenedPomFilename>opensilex-pom.xml</flattenedPomFilename>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <!-- Generate OpenSilex core feature interface --> 
            <plugin>
                <groupId>eu.somatik.serviceloader-maven-plugin</groupId>
                <artifactId>serviceloader-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>opensilex-standard-services</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <services>
                                <param>org.opensilex.OpenSilexModule</param>
                                <param>org.opensilex.cli.OpenSilexCommand</param>
                            </services>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
       
            <!-- Copy front theme files if exists -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven.resources.plugin.version}</version>
                <executions>
                    <!-- Copy Vue.js opensilex configuration into generated Jar file -->
                    <execution>
                        <id>Copy Vue theme files</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <skip>${skipFrontBuild}</skip>
                            <overwrite>true</overwrite>
                            <outputDirectory>${basedir}/target/classes/front/theme</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>front/theme</directory>
                                    <includes>
                                        <include>**</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!--Generate tests artifact--> 
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <forceCreation>true</forceCreation>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
                        </manifest>
                    </archive>
                    <skipIfEmpty>true</skipIfEmpty>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <!--inject pom properties into app.properties files--> 
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>write-project-properties</goal>
                        </goals>
                        <configuration>
                            <outputFile>
                                ${project.build.outputDirectory}/app.properties
                            </outputFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- site plugin -->
            <plugin>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven.site.plugin.version}</version>
                <configuration>
                    <locales>en</locales>
                    <!-- see below to enable multilang doc -->
                    <!--<locales>en,fr</locales>-->
                    <generateReports>true</generateReports>
                    <outputDirectory>../${generated.doc.site.directory}/${project.name}/</outputDirectory>
                </configuration>
            </plugin>
            
            <!-- front clean plugin, remove lib and types auto-generated folders -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven.clean.plugin.version}</version>
                <executions>
                    <execution>
                        <id>clean Vue front lib</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <configuration>
                            <skip>${skipTypeScriptLibBuild}</skip>
                            <filesets>
                                <fileset>
                                    <directory>front/src/lib</directory>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                    <excludes>
                                        <exclude>.gitkeep</exclude>
                                    </excludes>
                                </fileset>
                                <fileset>
                                    <directory>front/types</directory>
                                    <includes>
                                        <include>**/*</include>
                                    </includes>
                                </fileset>
                            </filesets>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!-- Standart maven site reports -->
    <reporting>
        <plugins>
            <plugin>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven.project.info.reports.plugin.version}</version>
            </plugin>
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId> 
                <artifactId>maven-javadoc-plugin</artifactId> 
                <version>${maven.javadoc.plugin.version}</version> 
                <configuration>
                    <source>8</source>
                    <quiet>true</quiet>
                    <javadocExecutable>${java.home}/bin/javadoc</javadocExecutable>
                    <failOnError>false</failOnError>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>   
                <version>${maven.surefire.report.plugin.version}</version>
            </plugin>  
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>${maven.jxr.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.maven.plugin.version}</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>${maven.pmd.plugin.version}</version>
                <configuration>
                    <linkXref>true</linkXref>
                    <sourceEncoding>utf-8</sourceEncoding>
                    <minimumTokens>100</minimumTokens>
                    <targetJdk>${java.compiler.version}</targetJdk>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${spotbugs.maven.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.1.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>checkstyle</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
        </plugins>
    </reporting>
    
    <!--  Configuration profiles  -->
    <profiles>
        <!-- Profile which enable Jacoco Code coverage -->
        <profile>
            <id>with-test-report</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${maven.surefire.plugin.version}</version>
                        <configuration>
                            <argLine>${surefireArgLine} -Dfile.encoding=${project.build.sourceEncoding}</argLine>
                            <trimStackTrace>false</trimStackTrace>
                            <useFile>false</useFile>
                            <reuseForks>true</reuseForks>
                        </configuration>
                    </plugin>
                    <!--Code coverage @see https://www.eclemma.org/jacoco/trunk/index.html --> 
                    <plugin>
                        <groupId>org.jacoco</groupId>
                        <artifactId>jacoco-maven-plugin</artifactId>
                        <version>${jacoco.maven.plugin.version}</version>
                        <configuration>
                            <outputDirectory>../${generated.doc.site.directory}/${project.name}/jacoco/</outputDirectory>
                            <excludes>
                                <exclude>**/*.war</exclude>
                            </excludes>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <destFile>${project.build.directory}/jacoco-ut.exec</destFile>
                                    <propertyName>surefireArgLine</propertyName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>pre-integration-test</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>prepare-agent</goal>
                                </goals>
                                <configuration>
                                    <destFile>${project.build.directory}/jacoco-it.exec</destFile>
                                    <propertyName>failsafeArgLine</propertyName>
                                </configuration>
                            </execution> 
                            <execution>
                                <id>merge</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>merge</goal>
                                </goals>
                                <configuration>
                                    <fileSets>
                                        <fileSet implementation="org.apache.maven.shared.model.fileset.FileSet">
                                            <directory>${project.build.directory}</directory>
                                            <includes>
                                                <include>*.exec</include>
                                            </includes>
                                        </fileSet>
                                    </fileSets>
                                    <destFile>${project.build.directory}/jacoco.exec</destFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>jacoco report</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>report</goal>
                                </goals>
                                <configuration>
                                    <title>${project.name} - ${project.version}</title>
                                    <footer>Code Coverage Report for ${project.name} - ${project.version}</footer>
                                    <dataFile>${project.build.directory}/jacoco.exec</dataFile>
                                    <includes>
                                        <!--Analyze class files only to exclude shaded agent JAR from report--> 
                                        <include>**/*.class</include>
                                    </includes>
                                </configuration>                                
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Build Vue app if present -->    
        <profile>
            <id>with-vue-app</id>
            <activation>
                <file>
                    <exists>front/package.json</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <version>${frontend.maven.plugin.version}</version>
                        <executions>
                            <!-- install Vue.js application dependencies with yarn package manager -->
                            <execution>
                                <id>install Vue application dependencies</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>

                                <configuration>
                                    <skip>${skipFrontLibInstall}</skip>
                                    <arguments>--network-timeout 1000000 install</arguments>
                                </configuration>
                            </execution>
                            <!-- Build typescript definition for auto-generated webservice access service library -->
                            <execution>
                                <id>build-typescript-definition</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>

                                <configuration>
                                    <skip>${skipFrontTypesGeneration}</skip>
                                    <arguments>run build:types</arguments>
                                    <workingDirectory>front/src/lib</workingDirectory>
                                </configuration>
                            </execution>
                            <!-- Build Vue.js project -->
                            <execution>
                                <id>build Vue application</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>

                                <configuration>
                                    <skip>${skipFrontBuild}</skip>
                                    <arguments>run build</arguments>
                                </configuration>
                            </execution>
                            
                            <!-- Check Vue.js project dependencies version -->
                            <execution>
                                <id>check Vue application outdated dependencies</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>

                                <configuration>
                                    <skip>${skipFrontBuild}</skip>
                                    <arguments>run check:outdated</arguments>
                                </configuration>
                            </execution>
                            
                            <!-- Check Vue.js project security issues -->
                            <execution>
                                <id>check Vue application security issues</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>

                                <configuration>
                                    <skip>${skipFrontAudit}</skip>
                                    <arguments>run check:security</arguments>
                                </configuration>
                            </execution>
                            
                        </executions>
                    </plugin>
                    
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${maven.resources.plugin.version}</version>
                        <executions>
                            <!-- Copy Vue.js compiled application into generated Jar file -->
                            <execution>
                                <id>Copy Vue application dist files</id>
                                <phase>prepare-package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/front</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>front/dist</directory>
                                        </resource>
                                        <resource>
                                            <directory>front/WEB-INF</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                            
                            <!-- Copy Vue.js tomcat configuration into generated Jar file -->
                            <execution>
                                <id>Copy Vue tomcat configuration</id>
                                <phase>process-sources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${basedir}/target/classes/front/WEB-INF</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>front/WEB-INF</directory>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>with-vue-config</id>
            <activation>
                <file>
                    <exists>front/opensilex.front.yml</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>${maven.resources.plugin.version}</version>
                        <executions>
                            <!-- Copy Vue.js opensilex configuration into generated Jar file -->
                            <execution>
                                <id>Copy Vue application configuration files</id>
                                <phase>process-sources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <skip>${skipFrontBuild}</skip>
                                    <overwrite>true</overwrite>
                                    <outputDirectory>${basedir}/target/classes/front</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>front</directory>
                                            <includes>
                                                <include>opensilex.front.yml</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Profile which enable OWASP security check for libraries, could be VERY slow -->
        <profile>
            <id>with-security-check</id>
            <properties>
                <skipFrontAudit>false</skipFrontAudit>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <executions>
                            <execution>
                                <phase>pre-site</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
            <reporting>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <reportSets>
                            <reportSet>
                                <reports>
                                    <report>check</report>
                                </reports>
                            </reportSet>
                        </reportSets>
                    </plugin>
                </plugins>
            </reporting>
        </profile>
        
        <!-- Profile to enable in eclipse to avoid build errors -->
        <profile>
            <id>for-eclipse</id>
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.eclipse.m2e</groupId>
                            <artifactId>lifecycle-mapping</artifactId>
                            <version>1.0.0</version>
                            <configuration>
                                <lifecycleMappingMetadata>
                                    <pluginExecutions>
                                        <pluginExecution>
                                            <pluginExecutionFilter>
                                                <groupId>org.codehaus.mojo</groupId>
                                                <artifactId>flatten-maven-plugin</artifactId>
                                                <goals>
                                                    <goal>flatten</goal>
                                                    <goal>clean</goal>
                                                </goals>
                                            </pluginExecutionFilter>
                                            <action>
                                                <execute />
                                            </action>
                                        </pluginExecution>
                                    </pluginExecutions>
                                </lifecycleMappingMetadata>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        
        <profile>
            <id>for-module</id>
            <properties>
                <skipFrontBuild>true</skipFrontBuild>
                <skipFrontAudit>true</skipFrontAudit>
                <skipIntegrationTest>true</skipIntegrationTest>
                <ignoreMavenPluginVersion>true</ignoreMavenPluginVersion>
                <skipTests>true</skipTests>
            </properties>
        </profile>
    </profiles>
</project>
