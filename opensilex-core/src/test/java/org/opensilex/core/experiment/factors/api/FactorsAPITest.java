//******************************************************************************
//                          ExperimentAPITest.java
// OpenSILEX - Licence AGPL V3.0 - https://www.gnu.org/licenses/agpl-3.0.en.html
// Copyright Â© INRAE 2020
// Contact: renaud.colin@inrae.fr, anne.tireau@inrae.fr, pascal.neveu@inrae.fr
//******************************************************************************
package org.opensilex.core.experiment.factors.api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import static junit.framework.TestCase.assertEquals;
import static junit.framework.TestCase.assertNotNull;
import static junit.framework.TestCase.assertTrue;
import org.junit.Test;
import org.opensilex.core.experiment.api.ExperimentAPITest;
import org.opensilex.core.experiment.factor.api.FactorCreationDTO;
import org.opensilex.core.experiment.factor.api.FactorDetailsGetDTO;
import org.opensilex.core.experiment.factor.api.FactorGetDTO;
import org.opensilex.core.experiment.factor.api.FactorLevelCreationDTO;
import org.opensilex.core.experiment.factor.api.FactorUpdateDTO;
import org.opensilex.core.experiment.factor.dal.FactorLevelModel;
import org.opensilex.core.experiment.factor.dal.FactorModel;
import org.opensilex.core.skos.model.SkosModelTest;
import org.opensilex.integration.test.security.AbstractSecurityIntegrationTest;
import org.opensilex.server.response.PaginatedListResponse;
import org.opensilex.server.response.SingleObjectResponse;
import org.opensilex.server.rest.serialization.ObjectMapperContextResolver;
import org.opensilex.sparql.model.SPARQLResourceModel;

/**
 * @author Arnaud Charleroy
 */
public class FactorsAPITest extends AbstractSecurityIntegrationTest {

    protected String pathFactors = "/core/experiments/factors";
    protected String pathFactorsLevel = "/core/experiments/factors/levels";

    protected String uriPath = pathFactors + "/{uri}";
    protected String factorsLevelsPath = pathFactors + "/{uri}/levels";
    protected String searchPath = pathFactors ;
    protected String createPath = pathFactors ;
    protected String updatePath = pathFactors ;
    protected String deleteFactorPath = pathFactors + "/{uri}";
    protected String deleteFactorsLevelPath = pathFactorsLevel + "/{uri}";
    protected String getFactorsLevelPath = pathFactorsLevel + "/{uri}";

    private static int factorCount = 0;

    public FactorCreationDTO getCreationDTO(URI experiment) throws URISyntaxException {
        factorCount++;
        FactorCreationDTO dto = new FactorCreationDTO();
        dto.setName("Factor name " + factorCount);
        dto.setCategory(new URI("http://purl.obolibrary.org/obo/PECO_0007085"));
        dto.setDescription("Factor Description" + factorCount);
        // skos model
        SkosModelTest.setValidSkosReferences(dto);
        dto.setExperiment(experiment);
        // factors levels
        List<FactorLevelCreationDTO> factorsLevels = new ArrayList<>();
        FactorLevelCreationDTO factorLevelDto = new FactorLevelCreationDTO();
        factorLevelDto.setName("factorsLevel");
        factorLevelDto.setDescription("autogenerated");
        factorsLevels.add(factorLevelDto);
        FactorLevelCreationDTO factorLevelDto2 = new FactorLevelCreationDTO();
        factorLevelDto2.setName("factorsLevel2");
        factorLevelDto2.setDescription("autogenerated2");
        factorsLevels.add(factorLevelDto2);
        dto.setFactorLevels(factorsLevels);

        return dto;
    }

    public FactorUpdateDTO addLevelFactorToDTO(FactorUpdateDTO updateDto) {
        List<FactorLevelCreationDTO> factorLevels = updateDto.getFactorLevels();
        FactorLevelCreationDTO factorLevelDto3 = new FactorLevelCreationDTO();
        factorLevelDto3.setName("factorsLevel3");
        factorLevelDto3.setDescription("autogenerated3");
        factorLevels.add(factorLevelDto3);
        updateDto.setFactorLevels(factorLevels);

        return updateDto;

    }

    public FactorUpdateDTO getUpdateDTOFromCreationDTO(FactorCreationDTO creationDto) throws URISyntaxException {
        FactorUpdateDTO dto = new FactorUpdateDTO();
        dto.setUri(creationDto.getUri());
        dto.setName(creationDto.getName());
        dto.setDescription(creationDto.getDescription());
        dto.setCategory(creationDto.getCategory());

        // skos model
        SkosModelTest.setValidSkosReferences(dto);
        // factors levels
        dto.setFactorLevels(creationDto.getFactorLevels()); 
        return dto;
    }

    @Test
    public void testCreate() throws Exception {
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        final Response postResult = getJsonPostResponse(target(createPath), getCreationDTO(createdUriExp)); 
        assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        URI createdUri = extractUriFromResponse(postResult);
        final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
        assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());
    }

    @Test
    public void testGetByUri() throws Exception {
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());
         // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        
        final Response postResult = getJsonPostResponse(target(createPath), getCreationDTO(createdUriExp));
        assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        URI createdUri = extractUriFromResponse(postResult);
        final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
        assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

        // try to deserialize object
        JsonNode node = getResult.readEntity(JsonNode.class);
        ObjectMapper mapper = ObjectMapperContextResolver.getObjectMapper();
        SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
        });
//        System.out.println(node.toPrettyString());

        FactorDetailsGetDTO factorGetDto = getResponse.getResult();
        assertNotNull(factorGetDto);
    }

    @Test
    public void testUpdate() throws Exception {
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());
         // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        
        FactorCreationDTO creationDTO = getCreationDTO(createdUriExp);
        int initialFactorLevelSize = creationDTO.getFactorLevels().size();
        final Response postResult = getJsonPostResponse(target(createPath), creationDTO);
        assertEquals(Response.Status.CREATED.getStatusCode(), postResult.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        URI createdUri = extractUriFromResponse(postResult);
        creationDTO.setUri(createdUri);
        // update
        FactorUpdateDTO updateDTOFromCreationDTO = getUpdateDTOFromCreationDTO(creationDTO);
        updateDTOFromCreationDTO = addLevelFactorToDTO(updateDTOFromCreationDTO); 
    
        final Response putResult = getJsonPutResponse(target(updatePath), updateDTOFromCreationDTO);
//        System.out.println("org.opensilex.core.factors.api.FactorsAPITest.testUpdate()");
        JsonNode putResultNode = putResult.readEntity(JsonNode.class);

//        System.out.println(putResultNode.toPrettyString());
        assertEquals(Response.Status.OK.getStatusCode(), putResult.getStatus());

        final Response getResult = getJsonGetByUriResponse(target(uriPath), createdUri.toString());
        assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

        // try to deserialize object
        JsonNode node = getResult.readEntity(JsonNode.class);
        ObjectMapper mapper = ObjectMapperContextResolver.getObjectMapper();
        SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
        });
        // System.out.println(node.toPrettyString());
        FactorDetailsGetDTO factorGetDto = getResponse.getResult();
        assertNotNull(factorGetDto);

        assertTrue(factorGetDto.getFactorLevels().size() == initialFactorLevelSize + 1);

    }

    @Test
    public void testSearch() throws Exception {
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());
         // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        FactorCreationDTO creationDTO = getCreationDTO(createdUriExp);
        FactorCreationDTO creationDTOTwo = getCreationDTO(createdUriExp);

        getJsonPostResponse(target(createPath), creationDTO);
        getJsonPostResponse(target(createPath), creationDTOTwo);
        getJsonPostResponse(target(createPath), getCreationDTO(createdUriExp));

        Map<String, Object> params = new HashMap<String, Object>() {
            
        };

        WebTarget searchTarget = appendSearchParams(target(searchPath), 0, 20, params);
        final Response getResult1 = appendToken(searchTarget).get();
        JsonNode node1 = getResult1.readEntity(JsonNode.class);

        // System.out.println(node1.toPrettyString());
        ObjectMapper mapper = ObjectMapperContextResolver.getObjectMapper();
        PaginatedListResponse<FactorGetDTO> factorListResponse1 = mapper.convertValue(node1,
                new TypeReference<PaginatedListResponse<FactorGetDTO>>() {
        });
        List<FactorGetDTO> list1 = factorListResponse1.getResult();

        // System.out.println("System.out.println(list1.size());"+list1.size());
        assertTrue(list1.size() == 3);

        // wtih parameters
        // System.out.println(creationDTO.getNames().get("en"));
        // System.out.println("search");
        // System.out.println(factorSearchDTO.getName());
         Map<String, Object> params2 = new HashMap<String, Object>() {
            {
                put("description", creationDTO.getDescription());
                put("name", creationDTO.getName());
                put("category", creationDTO.getCategory());
            }
        };

        WebTarget searchTarget2 = appendSearchParams(target(searchPath), 0, 20, params2);
        final Response getResult2 = appendToken(searchTarget2).get();

        assertEquals(Status.OK.getStatusCode(), getResult2.getStatus());

        JsonNode node2 = getResult2.readEntity(JsonNode.class);
        // System.out.println(node2.toPrettyString());
        PaginatedListResponse<FactorGetDTO> factorListResponse2 = mapper.convertValue(node2,
                new TypeReference<PaginatedListResponse<FactorGetDTO>>() {
        });
        List<FactorGetDTO> list2 = factorListResponse2.getResult();
        // System.out.println(list2.toString());

        assertTrue(!list2.isEmpty());

    }

   
    @Test
    public void testDeleteFactor() throws Exception { 
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        // create object and check if URI exists
        Response postResponse = getJsonPostResponse(target(createPath), getCreationDTO(createdUriExp));
        String uri = extractUriFromResponse(postResponse).toString();
        assertEquals(Response.Status.CREATED.getStatusCode(), postResponse.getStatus());
        // delete object and check if URI no longer exists
        Response delResult = getDeleteByUriResponse(target(deleteFactorPath), uri);
        assertEquals(Status.OK.getStatusCode(), delResult.getStatus());

        Response getResult = getJsonGetByUriResponse(target(uriPath), uri);
        assertEquals(Status.NOT_FOUND.getStatusCode(), getResult.getStatus());
    }

    @Test
    public void testGetFactorLevel() throws Exception {
        // create xp
        final Response postResultExp = getJsonPostResponse(target(ExperimentAPITest.createPath), ExperimentAPITest.getCreationDTO());
        assertEquals(Status.CREATED.getStatusCode(), postResultExp.getStatus());
         // ensure that the result is a well formed URI, else throw exception
        URI createdUriExp = extractUriFromResponse(postResultExp);
        
        // create object and check if URI exists
        FactorCreationDTO creationDTO = getCreationDTO(createdUriExp);
        Response postResponse = getJsonPostResponse(target(createPath), creationDTO);
        String uri = extractUriFromResponse(postResponse).toString();
        assertEquals(Response.Status.CREATED.getStatusCode(), postResponse.getStatus());

        // ensure that the result is a well formed URI, else throw exception
        final Response getResult = getJsonGetByUriResponse(target(uriPath), uri);
        assertEquals(Response.Status.OK.getStatusCode(), getResult.getStatus());

        // try to deserialize object
        JsonNode node = getResult.readEntity(JsonNode.class);
        ObjectMapper mapper = ObjectMapperContextResolver.getObjectMapper();
        SingleObjectResponse<FactorDetailsGetDTO> getResponse = mapper.convertValue(node,
                new TypeReference<SingleObjectResponse<FactorDetailsGetDTO>>() {
        });
//        System.out.println(node.toPrettyString());
        FactorDetailsGetDTO factorGetDto = getResponse.getResult();
        
        int factorLevelSize = factorGetDto.getFactorLevels().size();
        assertEquals(factorLevelSize, creationDTO.getFactorLevels().size());
        
//        System.out.println(factorLevelSize + "-"+ creationDTO.getFactorLevels().size());
        
        URI uriToFind = factorGetDto.getFactorLevels().get(0).getUri();
//        System.out.println(factorLevelSize + "-"+ creationDTO.getFactorLevels().size());

        Response getResult2 = getJsonGetByUriResponse(target(getFactorsLevelPath), uriToFind.toString());
//        System.out.println(uriToFind.toString());
        JsonNode readEntity = getResult2.readEntity(JsonNode.class);
//        System.out.println(readEntity.toString());
        assertEquals(Status.OK.getStatusCode(), getResult2.getStatus());
    }

    @Override
    protected List<Class<? extends SPARQLResourceModel>> getModelsToClean() {
        return Stream.of(FactorModel.class, FactorLevelModel.class).collect(Collectors.toList());

    }
}
